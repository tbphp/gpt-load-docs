{
  "nav": {
    "home": "ホーム",
    "docs": "ドキュメント",
    "sponsor": "スポンサー", 
    "github": "GitHub",
    "menu": "ドキュメントメニュー",
    "close": "メニューを閉じる"
  },
  "hero": {
    "title": "GPT-Load",
    "subtitle": "高性能AI APIトランスペアレントプロキシ",
    "description": "Go 1.23+で開発されたエンタープライズグレードのAI APIプロキシサービス。OpenAI、Google Gemini、Anthropic Claudeなどの複数のAIプロバイダーをサポート。インテリジェントキー管理、ロードバランシング、高同期処理、包括的監視機能を提供。",
    "buttons": {
      "docs": "ドキュメント",
      "install": "インストール",
      "github": "GitHub"
    },
    "tech": {
      "backend": "バックエンド言語",
      "database": "データストレージ",
      "cache": "キャッシュシステム",
      "frontend": "管理インターフェース"
    },
    "quickStart": {
      "title": "クイックスタート",
      "security": {
        "title": "セキュリティ警告",
        "message": "'your-secure-key-here'を強力なキーに置き換えてください！デフォルトまたは簡単なキーの使用は深刻なセキュリティリスクをもたらします。"
      },
      "access": "管理パネルにアクセス："
    }
  },
  "architecture": {
    "title": "システムアーキテクチャ",
    "subtitle": "高性能トランスペアレントプロキシアーキテクチャ",
    "description": "GPT-Loadは3層アーキテクチャ設計を採用し、高性能・高可用性のAI APIプロキシサービスを提供します",
    "components": {
      "client": {
        "title": "クライアントアプリケーション",
        "description": "WebおよびモバイルアプリがOpenAI API標準フォーマットで呼び出し",
        "items": ["HTTP/HTTPSリクエスト", "ベアラートークン認証", "JSONフォーマット交流"]
      },
      "proxy": {
        "title": "GPT-Loadプロキシ層",
        "description": "リクエスト転送と管理を担当するコアプロキシサービス",
        "items": ["トランスペアレントプロキシ", "キー管理", "ロードバランシング", "リクエストログ"]
      },
      "providers": {
        "title": "AIサービスプロバイダー",
        "description": "複数のAIサービスの統一アクセス",
        "items": ["OpenAI API", "Google Gemini", "Anthropic Claude", "その他の互換サービス"]
      }
    },
    "infrastructure": {
      "title": "インフラストラクチャ",
      "mysql": {
        "title": "MySQL 8.2+",
        "description": "永続ストレージ",
        "details": ["設定データ", "ユーザー情報", "リクエストログ"]
      },
      "redis": {
        "title": "Redis",
        "description": "キャッシュとロック",
        "details": ["キーキャッシュ", "分散ロック", "セッションストレージ"]
      },
      "management": {
        "title": "管理インターフェース",
        "description": "Webコントロールパネル",
        "details": ["ビジュアル設定", "監視ダッシュボード", "ログビューア"]
      }
    }
  },
  "features": {
    "title": "コア機能",
    "subtitle": "エンタープライズグレード機能",
    "highPerformance": {
      "title": "高性能アーキテクチャ",
      "description": "Go 1.23+で構築、ゼロコピーストリーミング、コルーチン同時実行モデル、高同時処理をサポート",
      "technical": "Goコルーチン + HTTP/2接続プーリング"
    },
    "transparentProxy": {
      "title": "トランスペアレントプロキシ",
      "description": "ネイティブAPIフォーマットを完全保持、コード変更なしで複数のAIサービスにアクセス可能",
      "technical": "OpenAI + Gemini + Anthropicサポート"
    },
    "keyManagement": {
      "title": "インテリジェントキー管理",
      "description": "グループ管理、動的ローテーション、自動リトライ、高サービス可用性を確保",
      "technical": "Redisキャッシュ + 障害回復"
    },
    "loadBalancing": {
      "title": "ロードバランシング",
      "description": "マルチアップストリームサポート、重み設定、ヘルスチェック、使用可能ノードへのインテリジェントルーティング",
      "technical": "重み付きラウンドロビン + ヘルスチェック"
    },
    "hotReload": {
      "title": "ホットリロード設定",
      "description": "3層設定システム：環境変数、システム設定、グループ設定、ホットアップデートをサポート",
      "technical": "環境変数 → システム設定 → グループ設定"
    },
    "clusterSupport": {
      "title": "クラスターサポート",
      "description": "水平スケーリング、分散デプロイメント、高可用性アーキテクチャ設計",
      "technical": "Docker + Kubernetesサポート"
    },
    "security": {
      "title": "セキュリティ機能",
      "description": "Bearer Token認証、グループ分離、リクエストログ、機密情報マスキング",
      "technical": "JWT + アクセス制御 + 監査ログ"
    },
    "admin": {
      "title": "管理ダッシュボード",
      "description": "Vue 3モダンインターフェース、リアルタイム監視、ログ表示、設定管理",
      "technical": "Vue 3 + TypeScript + Naive UI"
    },
    "developerFriendly": {
      "title": "開発者フレンドリー",
      "description": "完全なRESTful API、詳細ドキュメント、Dockerワンクリックデプロイメント",
      "technical": "OpenAPI + Docker Compose"
    }
  },
  "performance": {
    "title": "性能指標",
    "subtitle": "高性能結果",
    "description": "高同時実行性と低遅延をサポートする最適化された性能設定",
    "metrics": {
      "concurrent": {
        "label": "デフォルト同時実行数",
        "value": "100",
        "description": "MAX_CONCURRENT_REQUESTSデフォルト値"
      },
      "goVersion": {
        "label": "Goバージョン要件",
        "value": "1.23+",
        "description": "最低バージョン要件"
      },
      "connectionPool": {
        "label": "接続プール設定",
        "value": "100/50",
        "description": "最大アイドル接続数/ホスト毎接続数"
      },
      "timeout": {
        "label": "リクエストタイムアウト",
        "value": "600s",
        "description": "デフォルトリクエストタイムアウト"
      }
    },
    "comparisons": {
      "title": "性能比較",
      "configManagement": {
        "metric": "設定管理",
        "without": "静的設定ファイル",
        "with": "動的ホットリロード",
        "improvement": "再起動不要"
      },
      "keyManagement": {
        "metric": "キー管理",
        "without": "手動切り替え",
        "with": "スマートローテーション",
        "improvement": "自動フェイルオーバー"
      },
      "monitoring": {
        "metric": "監視・ログ",
        "without": "基本ログ",
        "with": "リアルタイム監視",
        "improvement": "ビジュアルダッシュボード"
      },
      "deployment": {
        "metric": "デプロイメント方法",
        "without": "モノリシックアプリ",
        "with": "コンテナクラスター",
        "improvement": "弾性スケーリング"
      }
    },
    "optimization": {
      "title": "性能最適化のヒント",
      "items": [
        "実際の負荷に基づいてMAX_CONCURRENT_REQUESTSを調整",
        "適切な接続プールサイズを設定",
        "Redisクラスターを使用してキャッシュ性能を向上",
        "リクエスト圧縮を有効にしてネットワークオーバーヘッドを削減",
        "定期的にログファイルを清理してディスク容量を解放"
      ]
    }
  },
  "quickStart": {
    "title": "クイックスタート",
    "subtitle": "5分間の素早い体験",
    "steps": [
      {
        "title": "ダウンロード・インストール",
        "description": "Dockerでワンクリックデプロイメント"
      },
      {
        "title": "キー設定",
        "description": "AIサービスプロバイダーのAPIキーを追加"
      },
      {
        "title": "使用開始",
        "description": "プロキシアドレス経由でAIサービスにアクセス"
      }
    ],
    "getStarted": "今すぐ始める"
  },
  "cta": {
    "title": "GPT-Loadを今すぐ使い始める",
    "subtitle": "数分でデプロイし、高性能AI APIプロキシサービスをお楽しみください",
    "buttons": {
      "quickDeploy": "クイックデプロイ",
      "viewDocs": "ドキュメントを見る",
      "github": "GitHub",
      "sponsor": "スポンサー"
    }
  },
  "footer": {
    "description": "複数の大規模モデルサービスに統一された負荷分散とキー管理を提供する高性能AIゲートウェイ。",
    "product": "製品",
    "community": "コミュニティ",
    "resources": "デプロイメント",
    "links": {
      "docs": "ドキュメント",
      "changelog": "更新ログ",
      "sponsor": "スポンサー",
      "github": "GitHub",
      "issues": "問題報告",
      "telegram": "Telegram",
      "standalone": "スタンドアローン",
      "cluster": "クラスター"
    },
    "copyright": "全著作権所有",
    "license": "MITライセンス",
    "openSource": "オープンソース"
  },
  "dataFlow": "データフローアーキテクチャ",
  "infrastructure": "インフラストラクチャコンポーネント",
  "deploymentOptions": {
    "title": "柔軟なデプロイメントオプション",
    "standalone": {
      "title": "スタンドアローンデプロイメント",
      "features": [
        "Docker Composeワンクリック起動",
        "完全なMySQL + Redisを含む",
        "開発および小規模本番に適合"
      ]
    },
    "cluster": {
      "title": "クラスターデプロイメント",
      "features": [
        "Master/Slaveアーキテクチャ",
        "水平スケーリングサポート",
        "高可用性保証"
      ]
    }
  },
  "systemRequirements": "システム要件",
  "runtime": "ランタイム環境",
  "storage": "データストレージ",
  "cache": "キャッシュサービス",
  "containerRuntime": "コンテナランタイム",
  "productionReady": {
    "title": "本番対応のエンタープライズアーキテクチャ",
    "description": "スタンドアローンデプロイメントから分散クラスターまで、開発環境から本番環境まで、GPT-Loadは完全なソリューションを提供",
    "runtime": "ランタイム環境",
    "persistence": "データ永続化",
    "cacheAndLock": "キャッシュ&ロック",
    "adminUI": "管理インターフェース"
  },
  "performanceComponent": {
    "title": "技術特性",
    "subtitle": "Go 1.23+ベースの高性能アーキテクチャ設計で、エンタープライズアプリケーションに信頼性の高いプロキシサービスを提供",
    "metrics": {
      "defaultConcurrency": {
        "label": "デフォルト同時実行数",
        "description": "MAX_CONCURRENT_REQUESTSデフォルト値"
      },
      "goVersion": {
        "label": "Goバージョン要件",
        "description": "最低バージョン要件"
      },
      "connectionPool": {
        "label": "接続プール設定",
        "description": "最大アイドル接続数/ホスト毎接続数"
      },
      "requestTimeout": {
        "label": "リクエストタイムアウト",
        "description": "デフォルトリクエストタイムアウト"
      }
    },
    "comparison": {
      "title": "パフォーマンス比較",
      "subtitle": "直接API呼び出し vs GPT-Loadプロキシ使用のパフォーマンス差異の比較",
      "headers": {
        "metric": "パフォーマンス指標",
        "directApi": "直接API呼び出し",
        "withGptLoad": "GPT-Load使用",
        "improvement": "パフォーマンス向上"
      },
      "items": {
        "configManagement": {
          "metric": "設定管理",
          "without": "静的設定ファイル",
          "with": "動的ホットリロード",
          "improvement": "再起動不要"
        },
        "keyManagement": {
          "metric": "キー管理",
          "without": "手動ローテーション",
          "with": "自動障害回復",
          "improvement": "スマートブラックリスト"
        },
        "clusterDeployment": {
          "metric": "クラスターデプロイメント",
          "without": "複雑な選出メカニズム",
          "with": "IS_SLAVEフラグ",
          "improvement": "シンプル設定"
        },
        "monitoring": {
          "metric": "監視機能",
          "without": "基本ログ",
          "with": "Web管理インターフェース",
          "improvement": "リアルタイム統計"
        }
      }
    },
    "monitoring": {
      "title": "リアルタイム監視機能",
      "features": {
        "detailedStats": {
          "title": "詳細統計",
          "description": "リクエスト数、レスポンス時間、エラー率などの包括的な監視"
        },
        "healthCheck": {
          "title": "ヘルスチェック",
          "description": "リアルタイムでサービス状態を監視し、異常を迅速に発見・処理"
        },
        "performanceAnalysis": {
          "title": "パフォーマンス分析",
          "description": "パフォーマンスのボトルネックを深く分析し、システム設定を最適化"
        }
      },
      "dashboard": {
        "title": "監視ダッシュボード",
        "metrics": {
          "totalRequests": "🟢 総リクエスト数:",
          "avgResponse": "⚡ 平均レスポンス:",
          "activeKeys": "🔑 アクティブキー:",
          "errorRate": "❌ エラー率:"
        }
      }
    }
  },
  "quickStartComponent": {
    "title": "クイックスタート",
    "subtitle": "3ステップでGPT-Loadを開始",
    "description": "Docker Composeによるクイックデプロイメント、完全なデータベースとキャッシュサービスを含む",
    "steps": {
      "clone": {
        "title": "1. プロジェクトをクローン",
        "description": "GitHubから完全なプロジェクトコードをダウンロード"
      },
      "configure": {
        "title": "2. 環境設定",
        "description": "環境設定ファイルをコピーして編集"
      },
      "start": {
        "title": "3. サービス開始",
        "description": "Docker Composeでワンクリック起動"
      }
    },
    "requirements": {
      "title": "システム要件",
      "runtime": "ランタイム環境",
      "storage": "データストレージ",
      "cache": "キャッシュサービス",
      "containerRuntime": "コンテナランタイム",
      "viewDocs": "詳細デプロイメントドキュメントを表示"
    },
    "codeComments": {
      "copyEnv": "環境設定ファイルをコピー",
      "editConfig": "設定を編集（オプション）",
      "mainConfig": "主要设定项目:",
      "startServices": "サービス開始（MySQLとRedisを含む）",
      "accessAdmin": "管理インターフェースにアクセス"
    }
  },
  "docs": {
    "quickStart": "クイックスタート",
    "introduction": "プロジェクト紹介",
    "deployment": "デプロイメント",
    "standalone": "スタンドアローン",
    "source": "ソースコード",
    "cluster": "クラスター",
    "clawCloud": "Claw Cloud",
    "configuration": "設定管理",
    "environment": "環境設定",
    "project": "プロジェクト設定",
    "management": "管理設定",
    "cloudflareAigateway": "Cloudflare AI Gateway",
    "architectureDesign": "アーキテクチャ設計",
    "performance": "パフォーマンス",
    "routingStrategy": "ルーティング戦略",
    "keyManagement": "キー管理",
    "channels": "チャンネル",
    "geminiOpenai": "Gemini公式OpenAI互換",
    "integrations": "統合ガイド",
    "rooCode": "Roo Code",
    "claudeCodeRouter": "Claude Code Router", 
    "newApi": "New API",
    "cherryStudio": "Cherry Studio",
    "sponsor": "スポンサー"
  },
  "imageViewer": {
    "closeButton": "閉じる (Esc)",
    "instructions": "Escキーまたは背景をクリックして閉じる",
    "clickToEnlarge": "画像をクリックして拡大表示"
  },
  "introduction": {
    "title": "GPT-Load プロジェクト紹介",
    "subtitle": "複数のAIサービスを統合する必要がある企業や開発者のために特別に設計された、高性能でエンタープライズグレードのAI API透明プロキシサービス。Go言語で開発され、インテリジェントキー管理、ロードバランシング、包括的监控機能を備え、高同期生産環境向けに設計されています。",
    "coreConcept": {
      "title": "コアコンセプト",
      "transparentProxy": {
        "title": "透明プロキシ",
        "description": "GPT-Loadは透明プロキシサービスとして、各AIサービスプロバイダーのネイティブAPIフォーマットを完全に保持し、フォーマット変換や統一を一切行いません。ユーザーがGPT-Loadにリクエストする方法と同じ方法で、GPT-Loadが上流サービスにリクエストし、完全に透明なプロキシ機能を実現します。"
      }
    },
    "supportedServices": {
      "title": "サポートされているAIサービス",
      "openai": {
        "features": ["公式OpenAI API", "Azure OpenAI", "OpenAI形式と互換性のあるすべてのサードパーティサービス"]
      },
      "gemini": {
        "features": ["Gemini Pro", "Gemini Pro Vision", "マルチモーダル機能サポート"]
      },
      "claude": {
        "features": ["Claudeシリーズモデル", "高品質対話生成", "ネイティブAPIフォーマットサポート"]
      }
    },
    "coreFeatures": {
      "title": "コア機能",
      "highPerformance": {
        "title": "高性能アーキテクチャ",
        "description": "ゼロコピーストリーミング転送、Goコルーチンベースの並行モデル、高並行接続をサポート"
      },
      "keyManagement": {
        "title": "インテリジェントキー管理",
        "description": "グループ管理、動的ローテーション、自動リトライ、高サービス可用性を確保"
      },
      "loadBalancing": {
        "title": "ロードバランシング",
        "description": "マルチアップストリームサポート、重み設定、ヘルスチェック、使用可能ノードへのインテリジェントルーティング"
      },
      "clusterSupport": {
        "title": "クラスターサポート",
        "description": "Master/Slaveアーキテクチャ、ステートレス設計、水平スケーリングをサポート"
      },
      "hotReload": {
        "title": "ホットリロード設定",
        "description": "3層設定システム：環境変数、システム設定、グループ設定、ホットアップデートをサポート"
      },
      "adminPanel": {
        "title": "管理ダッシュボード",
        "description": "Vue 3モダンインターフェース、リアルタイム監視、ログ表示、設定管理"
      }
    },
    "techStack": {
      "title": "技術スタック",
      "backend": {
        "title": "バックエンド技術",
        "items": [
          {"name": "Go 1.23+", "desc": "主要プログラミング言語"},
          {"name": "Gin", "desc": "HTTP Webフレームワーク"},
          {"name": "GORM", "desc": "ORMデータベースフレームワーク"},
          {"name": "MySQL 8.2+", "desc": "メインデータベースストレージ"},
          {"name": "Redis", "desc": "分散キャッシュと状態管理"},
          {"name": "Uber Dig", "desc": "依存性注入コンテナ"}
        ]
      },
      "frontend": {
        "title": "フロントエンド & DevOps",
        "items": [
          {"name": "Vue 3", "desc": "フロントエンドフレームワーク"},
          {"name": "TypeScript", "desc": "型安全性"},
          {"name": "Naive UI", "desc": "UIコンポーネントライブラリ"},
          {"name": "Docker", "desc": "コンテナ化デプロイメント"},
          {"name": "Docker Compose", "desc": "コンテナオーケストレーション"},
          {"name": "GitHub Actions", "desc": "CI/CDパイプライン"}
        ]
      }
    },
    "architectureAdvantages": {
      "title": "アーキテクチャの利点",
      "microservices": {
        "title": "マイクロサービスアーキテクチャ",
        "items": ["モジュラー設計", "依存性注入", "インターフェース駆動"]
      },
      "distributed": {
        "title": "分散設計",
        "items": ["Master/Slaveモード", "分散ロック", "キャッシュ同期"]
      },
      "highAvailability": {
        "title": "高可用性",
        "items": ["グレースフル劣化", "障害回復", "リソース保護"]
      }
    },
    "useCases": {
      "title": "使用事例",
      "enterprise": {
        "title": "エンタープライズAIサービス",
        "items": ["大規模API呼び出し", "コスト管理最適化", "サービス安定性保証"]
      },
      "developer": {
        "title": "開発者ツール",
        "items": ["統一APIアクセス", "デバッグ&監視", "クイックデプロイメント"]
      },
      "multiTenant": {
        "title": "マルチテナントサービス",
        "items": ["テナント分離", "カスタム設定", "使用統計"]
      }
    },
    "deepDive": {
      "title": "GPT-Loadの詳細理解",
      "subtitle": "GPT-Loadのコア技術アーキテクチャと高性能設計哲学を探求し、究極のプロキシ性能を実現する方法を学ぶ",
      "performance": {
        "title": "性能詳解",
        "subtitle": "究極の性能設計を理解",
        "features": [
          "ゼロI/O操作プロキシメカニズム",
          "ゼロコピーストリーミング転送技術",
          "ロックフリー並行処理アーキテクチャ",
          "超低リソース使用量最適化"
        ]
      },
      "architecture": {
        "title": "アーキテクチャ設計",
        "subtitle": "システム設計哲学の詳細",
        "features": [
          "インテリジェントキー管理メカニズム",
          "パス処理戦略設計",
          "分散クラスターアーキテクチャ",
          "高可用性保証メカニズム"
        ]
      }
    },
    "gettingStarted": {
      "title": "GPT-Loadを使い始める",
      "description": "Docker Composeを使ったクイックデプロイメント、数分で完全なAIインターフェースプロキシサービスを開始",
      "button": "デプロイメントガイドを見る"
    }
  },
  "docsQuickStart": {
    "title": "クイックスタート",
    "subtitle": "以下の手順でGPT-Loadを迅速に起動・実行します。",
    "quickLaunch": {
      "title": "クイック起動",
      "lightweightDeployment": {
        "title": "軽量デプロイメント",
        "description": "SQLiteデータベースとメモリストレージを使用、個人使用とクイックテストに最適"
      }
    },
    "requirements": {
      "title": "システム要件",
      "docker": "Docker 20.10+ と Docker Compose",
      "os": "Linux/macOS/Windows オペレーティングシステム",
      "resources": "最低128MBメモリと1GBディスク容量"
    },
    "installation": {
      "title": "インストール手順"
    },
    "security": {
      "title": "重要なセキュリティ通知",
      "warning": "デプロイ前にデフォルトの管理キーを変更する必要があります！",
      "requirements": {
        "complex": "複素キーには最低20文字を使用",
        "characters": "大文字、小文字、数字、特殊文字を含む",
        "avoid": "決して使用しない",
        "simpleKeys": "やその他のデフォルト/シンプルキー",
        "productionRisk": "本番環境で弱いキーを使用すると深刻なセキュリティリスクが生じます"
      },
      "recommendedFormat": "推奨キー形式",
      "randomString": "ランダム文字列",
      "characters": "文字"
    },
    "steps": {
      "createDirectory": {
        "title": "作業ディレクトリを作成",
        "comment": "ディレクトリを作成して入る"
      },
      "downloadConfig": {
        "title": "設定ファイルをダウンロード",
        "dockerComment": "Docker Compose設定をダウンロード",
        "envComment": "環境変数設定をダウンロード",
        "securityConfig": {
          "title": "セキュリティ設定を即座に変更",
          "editFile": "編集",
          "changeFrom": "ファイル、次の内容を変更：",
          "changeTo": "強いキーに："
        }
      },
      "startServices": {
        "title": "サービス開始",
        "comment": "GPT-Loadサービスを開始"
      },
      "verify": {
        "title": "デプロイメント確認",
        "accessAdmin": "管理インターフェースにアクセス",
        "useAuthKey": "使用する",
        "fileSet": "ファイルに設定された",
        "login": "で管理インターフェースにログイン"
      }
    },
    "commands": {
      "title": "一般的なコマンド",
      "checkStatus": "ステータス確認",
      "viewLogs": "ログ表示",
      "restart": "サービス再起動",
      "update": "バージョン更新"
    },
    "nextSteps": {
      "description": "MySQL/PostgreSQLの使用やクラスターデプロイメントなど、より多くのデプロイメントオプションを学びたいですか？完全な",
      "deploymentGuide": "デプロイメントガイド",
      "period": "をご覧ください。"
    }
  },
  "architectureDesign": {
    "title": "システムアーキテクチャ",
    "subtitle": "GPT-Loadの技術アーキテクチャと設計理念の詳細理解",
    "overview": {
      "title": "アーキテクチャ概要",
      "highlightTitle": "高性能透明プロキシアーキテクチャ",
      "highlightDescription": "Go言語ベースの高性能OpenAI APIプロキシサービス、マルチキーローテーション、負荷分散、インテリジェントフェイルオーバーをサポート"
    },
    "components": {
      "apiGateway": {
        "title": "APIゲートウェイ",
        "description": "統合APIエントリポイントとルーティング"
      },
      "loadBalancer": {
        "title": "負荷分散",
        "description": "インテリジェントキーローテーションと分散"
      },
      "dataStorage": {
        "title": "データストレージ",
        "description": "MySQL + Redis二重ストレージ"
      },
      "securityMonitor": {
        "title": "セキュリティ監視",
        "description": "レート制限、認証、監視"
      }
    },
    "systemComponents": {
      "title": "システムコンポーネント",
      "coreService": {
        "title": "コアサービス層",
        "apiProxy": {
          "title": "APIプロキシサービス",
          "features": ["HTTP/HTTPS透明プロキシ", "リクエストルーティングと転送", "ストリーミングレスポンス処理", "エラーハンドリングと再試行"]
        },
        "loadBalancer": {
          "title": "負荷分散装置",
          "features": ["ラウンドロビンアルゴリズム", "重み割り当て戦略", "ヘルスチェック機構", "自動フェイルオーバー"]
        }
      },
      "managementLayer": {
        "title": "管理サービス層",
        "webInterface": {
          "title": "Web管理インターフェース",
          "features": ["Vue 3 + TypeScript", "Naive UIコンポーネントライブラリ", "リアルタイム監視ダッシュボード", "設定管理インターフェース"]
        },
        "restApi": {
          "title": "REST API",
          "features": ["キー管理インターフェース", "統計データインターフェース", "システム設定インターフェース", "監視メトリクスインターフェース"]
        }
      },
      "dataLayer": {
        "title": "データストレージ層",
        "mysql": {
          "title": "MySQLデータベース",
          "features": ["キーと設定の永続化", "ユーザー認証データ", "履歴統計レコード", "システムログストレージ"]
        },
        "redis": {
          "title": "Redisキャッシュ",
          "features": ["キーステータスキャッシュ", "レート制限カウンター", "分散ロック機構", "セッション状態管理"]
        }
      }
    },
    "dataFlow": {
      "title": "データフロー",
      "steps": [
        {
          "title": "クライアントリクエスト",
          "description": "APIゲートウェイがOpenAI互換リクエストを受信"
        },
        {
          "title": "キー選択",
          "description": "負荷分散装置が利用可能なAPIキーを選択"
        },
        {
          "title": "リクエスト転送",
          "description": "プロキシサービスがOpenAI APIにリクエストを転送"
        },
        {
          "title": "レスポンス処理",
          "description": "ストリーミングレスポンス処理してクライアントに返却"
        },
        {
          "title": "データ記録",
          "description": "統計データとログをデータベースに記録"
        }
      ]
    },
    "deploymentArchitectures": {
      "title": "デプロイメントアーキテクチャ",
      "standalone": {
        "title": "スタンドアロンデプロイメント",
        "scenarios": {
          "title": "適用シナリオ",
          "items": ["中小規模アプリケーション", "開発テスト環境", "個人プロジェクト使用"]
        }
      },
      "cluster": {
        "title": "クラスターデプロイメント",
        "scenarios": {
          "title": "適用シナリオ",
          "items": ["大規模本番環境", "高可用性要件", "エンタープライズグレードアプリケーション"]
        }
      }
    },
    "techStack": {
      "title": "技術スタック",
      "backend": {
        "title": "バックエンド技術",
        "items": ["Go 1.23+", "Gin Webフレームワーク", "GORM ORM", "Go-Redis"]
      },
      "frontend": {
        "title": "フロントエンド技術",
        "items": ["Vue 3", "TypeScript", "Naive UI", "Vite"]
      },
      "infrastructure": {
        "title": "インフラストラクチャ",
        "items": ["MySQL 8.2+", "Redis", "Docker", "Nginx"]
      }
    },
    "designPrinciples": {
      "title": "設計原則",
      "highPerformance": {
        "title": "高性能",
        "description": "Go言語ベースの高同時性処理能力、数千QPSのリクエスト処理をサポート"
      },
      "highAvailability": {
        "title": "高可用性",
        "description": "自動フェイルオーバー、ヘルスチェック、分散デプロイメントでサービス可用性を保証"
      },
      "scalability": {
        "title": "スケーラビリティ",
        "description": "モジュラー設計とマイクロサービスアーキテクチャで水平スケーリングと機能拡張をサポート"
      },
      "transparentProxy": {
        "title": "透明プロキシ",
        "description": "OpenAI APIと完全互換、既存コードの変更なしで統合可能"
      }
    }
  },
  "seo": {
    "pages": {
      "home": {
        "title": "GPT-Load - 高性能AI APIトランスペアレントプロキシ",
        "description": "エンタープライズグレードのAI APIプロキシサービス。各AIプロバイダーのネイティブAPIフォーマットを完全に保持。キーローテーション、マルチグループ管理、ロードバランシング機能を提供。",
        "keywords": "GPT, OpenAI, API, トランスペアレントプロキシ, ロードバランシング, キーローテーション, Go, 高性能, AIプロキシ, Gemini, Claude"
      },
      "docs": {
        "quickStart": {
          "title": "クイックスタート - GPT-Load デプロイメントガイド",
          "description": "Dockerワンクリック起動で5分でGPT-Loadをデプロイ。完全なデータベースとキャッシュサービスを含む。",
          "keywords": "GPT-Loadデプロイメント, Dockerデプロイメント, クイックスタート, AIプロキシインストール"
        }
      },
      "introduction": {
        "title": "プロジェクト紹介 - GPT-Load アーキテクチャと技術スタック",
        "description": "GPT-Loadのコアコンセプト、技術アーキテクチャ、サポートされているAIサービス、エンタープライズ機能の詳細。",
        "keywords": "GPT-Loadアーキテクチャ, AIプロキシ技術, 透明プロキシ原理, マイクロサービスアーキテクチャ, Go言語"
      }
    }
  },
  "keyManagement": {
    "title": "インテリジェントキー管理",
    "subtitle": "GPT-Loadはポーリング負荷分散、自動障害検出と復旧メカニズムを通じてインテリジェントキー管理機構を採用し、サービスの高可用性と安定性を確保します。",
    "polling": {
      "title": "ポーリングメカニズム",
      "objective": {
        "title": "目標",
        "description": "グループ内の複数キー間での要求の公平な負荷分散を実現。"
      },
      "implementation": {
        "title": "実装方式",
        "atomicCounter": {
          "title": "アトミックカウンター",
          "description": "高同時実行下でのポーリング一貫性と公平性を保証"
        },
        "statusFilter": {
          "title": "ステータスフィルタリング",
          "description": "ポーリング範囲はグループ内の「有効」ステータスのキーに限定"
        }
      }
    },
    "retry": {
      "title": "リトライと障害処理",
      "trigger": {
        "title": "トリガーシナリオ",
        "description": "リクエストが失敗した場合（HTTPステータス≥400またはネットワークエラー）に自動的にトリガー"
      },
      "process": {
        "title": "処理フロー",
        "step1": {
          "title": "失敗マーク",
          "description": "現在失敗したキーの失敗カウントを1増やす"
        },
        "step2": {
          "title": "新しいキーを取得",
          "description": "ポーリングメカニズムを通じてグループ内の次の利用可能なキーを即座に取得"
        },
        "step3": {
          "title": "透明リトライ",
          "description": "新しいキーを使用してリクエストを再実行、クライアントには透明"
        },
        "step4": {
          "title": "リトライ上限",
          "description": "設定された最大リトライ回数。すべての試行が失敗した場合、最終エラーをクライアントに返す"
        }
      }
    },
    "blacklist": {
      "title": "キーブラックリストと復旧",
      "mechanism": {
        "title": "ブラックリストメカニズム",
        "trigger": {
          "title": "トリガー条件",
          "description": "キーの累積失敗回数がブラックリスト閾値に達した時"
        },
        "actions": {
          "title": "実行アクション",
          "items": [
            "キーステータスを「無効」に更新",
            "ポーリングキューから除去、新しいリクエストを受け取らない"
          ]
        }
      }
    },
    "recovery": {
      "title": "復旧メカニズム",
      "timing": {
        "title": "トリガータイミング",
        "description": "キー検証間隔サイクルに従って実行されるバックグラウンド定期タスク"
      },
      "process": {
        "title": "復旧フロー",
        "step1": {
          "title": "ヘルスチェック",
          "description": "ブラックリストされたキーを使用して検証エンドポイント（モデルリストなど）をリクエスト"
        },
        "step2": {
          "title": "検証成功",
          "items": [
            "キーステータスを「有効」に復元",
            "失敗カウントを0にリセット",
            "ポーリングキューに再追加"
          ]
        },
        "step3": {
          "title": "検証失敗",
          "description": "「無効」ステータスを維持、次の検査サイクルを待つ"
        }
      }
    },
    "advantages": {
      "title": "メカニズムの利点",
      "loadBalancing": {
        "title": "負荷分散",
        "description": "アトミックカウンターが高同時実行下での公平なポーリングを保証"
      },
      "autoRecovery": {
        "title": "自動復旧",
        "description": "定期的なヘルスチェックと障害キーの自動復旧"
      },
      "faultIsolation": {
        "title": "障害分離",
        "description": "障害キーを迅速に特定し、サービスの安定性を確保"
      }
    }
  }
}