{
  "nav": {
    "home": "首页",
    "docs": "文档",
    "sponsor": "赞助",
    "github": "GitHub",
    "menu": "文档菜单",
    "close": "关闭菜单"
  },
  "hero": {
    "title": "GPT-Load",
    "subtitle": "高性能 AI 接口透明代理",
    "description": "基于 Go 1.23+ 开发的企业级 AI 接口代理服务，支持 OpenAI、Google Gemini、Anthropic Claude 等多种 AI 服务提供商。提供智能密钥管理、负载均衡、高并发处理和完善的监控功能。",
    "buttons": {
      "docs": "项目文档",
      "install": "安装部署",
      "github": "GitHub"
    },
    "tech": {
      "backend": "后端语言",
      "database": "数据存储", 
      "cache": "缓存系统",
      "frontend": "管理界面"
    },
    "quickStart": {
      "title": "快速启动",
      "security": {
        "title": "安全警告",
        "message": "请务必将 your-secure-key-here 替换为复杂的密钥！使用默认或简单密钥存在严重安全风险。"
      },
      "access": "访问管理界面："
    }
  },
  "architecture": {
    "title": "系统架构",
    "subtitle": "高性能透明代理架构设计",
    "description": "GPT-Load 采用三层架构设计，提供高性能、高可用的 AI API 代理服务",
    "components": {
      "client": {
        "title": "客户端应用",
        "description": "Web/移动应用通过标准 OpenAI API 格式调用",
        "items": ["HTTP/HTTPS 请求", "Bearer Token 认证", "JSON 格式交互"]
      },
      "proxy": {
        "title": "GPT-Load 代理层", 
        "description": "核心代理服务，负责请求转发和管理",
        "items": ["透明代理", "密钥管理", "负载均衡", "请求日志"]
      },
      "providers": {
        "title": "AI 服务提供商",
        "description": "多种 AI 服务的统一接入",
        "items": ["OpenAI API", "Google Gemini", "Anthropic Claude", "其他兼容服务"]
      }
    },
    "infrastructure": {
      "title": "基础设施",
      "mysql": {
        "title": "MySQL 8.2+",
        "description": "持久化存储",
        "details": ["配置数据", "用户信息", "请求日志"]
      },
      "redis": {
        "title": "Redis",
        "description": "缓存与锁", 
        "details": ["密钥缓存", "分布式锁", "会话存储"]
      },
      "management": {
        "title": "管理界面",
        "description": "Web 控制面板",
        "details": ["可视化配置", "监控仪表板", "日志查看"]
      }
    }
  },
  "features": {
    "title": "核心特性",
    "subtitle": "企业级功能设计",
    "highPerformance": {
      "title": "高性能架构",
      "description": "基于 Go 1.23+ 开发，零拷贝流式传输，协程并发模型，支持高并发处理",
      "technical": "Go 协程 + HTTP/2 连接复用"
    },
    "transparentProxy": {
      "title": "透明代理",
      "description": "完全保留原生 API 格式，无需修改现有代码即可接入多种 AI 服务",
      "technical": "OpenAI + Gemini + Anthropic 支持"
    },
    "keyManagement": {
      "title": "智能密钥管理",
      "description": "分组管理、动态轮换、自动重试，确保服务高可用性",
      "technical": "Redis 缓存 + 故障恢复机制"
    },
    "loadBalancing": {
      "title": "负载均衡",
      "description": "多上游支持、权重配置、健康检查，智能路由到可用节点",
      "technical": "加权轮询 + 健康检查"
    },
    "hotReload": {
      "title": "热重载配置",
      "description": "三层配置系统，环境变量、系统设置、分组配置，支持热更新",
      "technical": "环境变量 → 系统设置 → 分组设置"
    },
    "clusterSupport": {
      "title": "集群支持",
      "description": "水平扩展、分布式部署、高可用架构设计",
      "technical": "Docker + Kubernetes 支持"
    },
    "security": {
      "title": "安全机制",
      "description": "Bearer Token 认证、分组隔离、请求日志、敏感信息脱敏",
      "technical": "JWT + 访问控制 + 审计日志"
    },
    "admin": {
      "title": "管理后台",
      "description": "Vue 3 现代化界面，实时监控、日志查看、配置管理",
      "technical": "Vue 3 + TypeScript + Naive UI"
    },
    "developerFriendly": {
      "title": "开发友好",
      "description": "完整的 RESTful API、详细文档、Docker 一键部署",
      "technical": "OpenAPI + Docker Compose"
    }
  },
  "quickStart": {
    "title": "快速开始",
    "subtitle": "5分钟快速体验",
    "steps": [
      {
        "title": "下载安装",
        "description": "使用 Docker 一键部署"
      },
      {
        "title": "配置密钥",
        "description": "添加 AI 服务商 API 密钥"
      },
      {
        "title": "开始使用", 
        "description": "通过代理地址访问 AI 服务"
      }
    ],
    "getStarted": "立即开始"
  },
  "cta": {
    "title": "立即开始使用 GPT-Load",
    "subtitle": "几分钟内即可部署完成，开始享受高性能的 AI 接口代理服务",
    "buttons": {
      "quickDeploy": "快速部署",
      "viewDocs": "查看文档",
      "github": "GitHub",
      "sponsor": "支持赞助"
    }
  },
  "footer": {
    "description": "高性能 AI 网关，为多种大模型服务提供统一的负载均衡和密钥管理。",
    "product": "产品",
    "community": "社区",
    "resources": "部署",
    "links": {
      "docs": "使用文档",
      "changelog": "更新日志",
      "sponsor": "支持赞助",
      "github": "GitHub",
      "issues": "问题反馈",
      "telegram": "Telegram",
      "standalone": "单机",
      "cluster": "集群"
    },
    "copyright": "版权所有",
    "license": "MIT 协议",
    "openSource": "开源发布"
  },
  "dataFlow": "数据流架构",
  "infrastructure": "基础设施组件",
  "deploymentOptions": {
    "title": "灵活的部署方式",
    "standalone": {
      "title": "单机部署",
      "features": [
        "Docker Compose 一键启动",
        "包含完整的 MySQL + Redis",
        "适合开发和小规模生产"
      ]
    },
    "cluster": {
      "title": "集群部署",
      "features": [
        "Master/Slave 架构",
        "水平扩展支持",
        "高可用性保障"
      ]
    }
  },
  "systemRequirements": "系统要求",
  "runtime": "运行环境",
  "storage": "数据存储",
  "cache": "缓存服务",
  "containerRuntime": "容器运时",
  "productionReady": {
    "title": "生产就绪的企业级架构",
    "description": "从单机部署到分布式集群，从开发环境到生产环境，GPT-Load提供完整的解决方案",
    "runtime": "运行时环境",
    "persistence": "数据持久化",
    "cacheAndLock": "缓存 & 锁",
    "adminUI": "管理界面"
  },
  "performanceComponent": {
    "title": "技术特性",
    "subtitle": "基于 Go 1.23+ 的高性能架构设计，为企业级应用提供可靠的代理服务",
    "metrics": {
      "defaultConcurrency": {
        "label": "默认并发数",
        "description": "MAX_CONCURRENT_REQUESTS 默认值"
      },
      "goVersion": {
        "label": "Go 版本要求",
        "description": "最低版本要求"
      },
      "connectionPool": {
        "label": "连接池配置",
        "description": "最大空闲连接数/每主机连接数"
      },
      "requestTimeout": {
        "label": "请求超时",
        "description": "默认请求超时时间"
      }
    },
    "comparison": {
      "title": "性能对比",
      "subtitle": "对比直接调用 API vs 使用 GPT-Load 代理的性能差异",
      "headers": {
        "metric": "性能指标",
        "directApi": "直接调用 API",
        "withGptLoad": "使用 GPT-Load",
        "improvement": "性能提升"
      },
      "items": {
        "configManagement": {
          "metric": "配置管理",
          "without": "静态配置文件",
          "with": "动态热重载",
          "improvement": "无需重启"
        },
        "keyManagement": {
          "metric": "密钥管理",
          "without": "手动轮换",
          "with": "自动故障恢复",
          "improvement": "智能黑名单"
        },
        "clusterDeployment": {
          "metric": "集群部署",
          "without": "复杂选举机制",
          "with": "IS_SLAVE 标记",
          "improvement": "简单配置"
        },
        "monitoring": {
          "metric": "监控能力",
          "without": "基础日志",
          "with": "Web 管理界面",
          "improvement": "实时统计"
        }
      }
    },
    "monitoring": {
      "title": "实时监控功能",
      "features": {
        "detailedStats": {
          "title": "详细统计",
          "description": "请求数量、响应时间、错误率等全方位监控"
        },
        "healthCheck": {
          "title": "健康检查",
          "description": "实时监控服务状态，及时发现并处理异常"
        },
        "performanceAnalysis": {
          "title": "性能分析",
          "description": "深入分析性能瓶颈，优化系统配置"
        }
      },
      "dashboard": {
        "title": "监控面板",
        "metrics": {
          "totalRequests": "🟢 总请求数:",
          "avgResponse": "⚡ 平均响应:",
          "activeKeys": "🔑 活跃密钥:",
          "errorRate": "❌ 错误率:"
        }
      }
    }
  },
  "quickStartComponent": {
    "title": "快速开始",
    "subtitle": "3 步启动 GPT-Load",
    "description": "通过 Docker Compose 快速部署，包含完整的数据库和缓存服务",
    "steps": {
      "clone": {
        "title": "1. 克隆项目",
        "description": "从 GitHub 下载完整项目代码"
      },
      "configure": {
        "title": "2. 配置环境",
        "description": "复制并编辑环境配置文件"
      },
      "start": {
        "title": "3. 启动服务",
        "description": "使用 Docker Compose 一键启动"
      }
    },
    "requirements": {
      "title": "系统要求",
      "runtime": "运行环境",
      "storage": "数据存储",
      "cache": "缓存服务",
      "containerRuntime": "容器运时",
      "viewDocs": "查看详细部署文档"
    },
    "codeComments": {
      "copyEnv": "复制环境配置文件",
      "editConfig": "编辑配置（可选）",
      "mainConfig": "主要配置项：",
      "startServices": "启动服务（包含 MySQL 和 Redis）",
      "accessAdmin": "访问管理界面"
    }
  },
  "docs": {
    "quickStart": "快速开始",
    "introduction": "项目简介",
    "deployment": "部署指南",
    "standalone": "单机部署",
    "source": "源码部署",
    "cluster": "集群部署",
    "clawCloud": "Claw Cloud",
    "configuration": "配置管理",
    "environment": "环境配置",
    "project": "项目配置",
    "management": "管理端配置",
    "cloudflareAigateway": "Cloudflare AI Gateway",
    "architectureDesign": "架构与设计",
    "performance": "性能详解",
    "routingStrategy": "路径设计策略", 
    "keyManagement": "智能密钥管理",
    "channels": "渠道类型",
    "geminiOpenai": "Gemini 官方 OpenAI 兼容",
    "integrations": "接入指南",
    "rooCode": "Roo Code",
    "claudeCodeRouter": "Claude Code Router",
    "newApi": "New API",
    "cherryStudio": "Cherry Studio",
    "sponsor": "支持赞助"
  },
  "geminiOpenai": {
    "title": "Gemini 官方支持的 OpenAI 兼容格式",
    "subtitle": "GPT-Load 现已支持 Google Gemini 的官方 OpenAI 兼容格式，让您能够使用标准的 OpenAI SDK 和工具来访问 Gemini 模型的强大功能。",
    "notice": "注意：这并不是格式转换，只是对Gemini官方的OpenAI兼容格式进行透明代理。详情请参考官方文档：",
    "configuration": {
      "title": "GPT-Load 中的配置",
      "steps": [
        {
          "title": "步骤一：创建 Gemini 分组",
          "items": [
            "• <strong>分组名称</strong>：gemini（建议使用此名称）",
            "• <strong>渠道类型</strong>：选择 &ldquo;gemini&rdquo; 类型",
            "• <strong>上游地址</strong>：https://generativelanguage.googleapis.com",
            "• <strong>API 密钥</strong>：添加您的 Gemini API Key"
          ]
        },
        {
          "title": "步骤二：获取代理端点",
          "items": []
        }
      ],
      "groupConfig": {
        "title": "分组配置"
      },
      "importantNotes": {
        "title": "重要说明",
        "items": [
          "• 使用官方 Google 的 generativelanguage.googleapis.com 端点",
          "• 确保 API 密钥有效且有足够的配额",
          "• 分组创建后会自动兼容 OpenAI 兼容格式",
          "• 支持负载均衡和故障转移"
        ]
      },
      "proxyEndpoint": {
        "format": "代理端点格式：",
        "description": "GPT-Load 会为 Gemini 分组生成专用的 OpenAI 兼容端点",
        "fullPath": "完整调用路径",
        "endpoint": "http://localhost:3001/proxy/gemini/v1beta/openai/chat/completions"
      }
    },
    "examples": {
      "title": "客户端调用示例",
      "cherryStudio": {
        "title": "Cherry Studio 配置",
        "recommended": "推荐使用：",
        "description": "Cherry Studio 是一个优秀的 AI 客户端，完美支持 Gemini OpenAI 兼容格式",
        "stepsTitle": "配置步骤",
        "steps": [
          "打开 Cherry Studio",
          "创建新的渠道，提供商类型选择OpenAI",
          "设置基础URL为代理端点",
          "输入代理密钥",
          "开始使用 Gemini 模型"
        ],
        "paramsTitle": "配置参数",
        "params": [
          {
            "label": "提供商类型：",
            "value": "OpenAI"
          },
          {
            "label": "基础URL：",
            "value": "http://localhost:3001/proxy/gemini/v1beta/openai/",
            "note": "（必须以 / 结尾）"
          },
          {
            "label": "API Key：",
            "value": "your-proxy-key"
          }
        ]
      },
      "curl": {
        "title": "cURL 直接调用",
        "code": "curl -X POST \"http://localhost:3001/proxy/gemini/v1beta/openai/chat/completions\" \\\\\n  -H \"Authorization: Bearer your-proxy-key\" \\\\\n  -H \"Content-Type: application/json\" \\\\\n  -d '{\n    \"model\": \"gemini-2.5-flash\",\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"hi\"\n      }\n    ]\n  }'"
      }
    },
    "notes": {
      "title": "注意事项",
      "items": [
        "• 确保 GPT-Load 版本最新以支持 Gemini OpenAI 兼容格式",
        "• Cherry Studio 基础URL必须以斜杠（/）结尾，否则可能导致调用失败",
        "• Gemini API Key 需要有足够的配额和正确的权限"
      ]
    }
  },
  "standalone": {
    "title": "单机部署",
    "subtitle": "单机部署是 GPT-Load 最简单的部署方式，适合个人用户和小团队快速上手。支持从轻量化快速启动到完整功能的可选部署。",
    "quickStart": {
      "title": "快速启动",
      "lightweight": {
        "title": "轻量化部署",
        "description": "使用 SQLite 数据库和内存存储，最适合个人使用和快速体验"
      }
    },
    "requirements": {
      "title": "环境要求",
      "items": [
        "Docker 20.10+ 和 Docker Compose",
        "Linux/macOS/Windows 操作系统",
        "至少 128MB 内存和 1GB 磁盘空间"
      ]
    },
    "installation": {
      "title": "安装步骤",
      "step1": {
        "title": "创建工作目录",
        "comment": "# 创建目录并进入"
      },
      "step2": {
        "title": "下载并配置安全参数",
        "dockerComment": "# 下载 Docker Compose 配置",
        "envComment": "# 下载环境变量配置",
        "securityConfig": {
          "title": "必须执行：修改管理密钥",
          "editFile": "立即编辑",
          "changeFrom": "文件，将：",
          "changeTo": "替换为安全的密钥：",
          "reminder": {
            "title": "提醒：",
            "message": "请生成您自己的随机密钥，不要使用上面的示例密钥！"
          }
        }
      },
      "step3": {
        "title": "启动服务",
        "comment": "# 启动 GPT-Load 服务"
      },
      "step4": {
        "title": "验证部署",
        "accessAdmin": "访问管理界面：",
        "useAuthKey": "使用您自定义的管理密钥登录",
        "fileSet": "即您在",
        "login": "文件中设置的",
        "value": "值",
        "securityTip": {
          "title": "安全提示：",
          "message": "请妥善保管您的管理密钥，不要在日志、文档或代码中明文存储。"
        }
      }
    },
    "security": {
      "warning": {
        "title": "关键安全警告",
        "message": "部署前必须更改默认管理密钥，否则存在严重安全风险！"
      },
      "requirements": {
        "title": "安全密钥要求：",
        "items": [
          "最少 20 个字符",
          "包含大小写字母、数字、特殊符号",
          "避免使用字典词汇或个人信息",
          "推荐格式：sk-prod-[32位随机字符串]"
        ]
      },
      "risk": "⚠️ 使用弱密钥可能导致系统被恶意访问，造成数据泄露或服务滥用！"
    },
    "commonCommands": {
      "title": "常用命令",
      "items": [
        {
          "title": "查看状态",
          "code": "docker compose ps"
        },
        {
          "title": "查看日志",
          "code": "docker compose logs -f"
        },
        {
          "title": "重启服务",
          "code": "docker compose down && docker compose up -d"
        },
        {
          "title": "更新版本",
          "code": "docker compose pull && docker compose down && docker compose up -d"
        }
      ]
    },
    "optional": {
      "title": "可选部署",
      "performance": {
        "title": "增强性能",
        "description": "配置 MySQL/PostgreSQL 数据库和 Redis 缓存，提升系统性能和可靠性"
      },
      "database": {
        "title": "数据库配置",
        "configs": [
          {
            "name": "MySQL 配置",
            "steps": [
              "1. 编辑 <code class=\"bg-gray-100 px-1 rounded\">docker-compose.yml</code>，取消 MySQL 服务的注释：<div class=\"bg-gray-900 text-gray-100 p-4 rounded-lg text-sm\"><code>&nbsp;&nbsp;depends_on:<br />&nbsp;&nbsp;&nbsp;&nbsp;mysql:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;condition: service_healthy<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restart: true<br /><br />mysql:<br />&nbsp;&nbsp;image: mysql:8.2<br />&nbsp;&nbsp;container_name: gpt-load-mysql<br />&nbsp;&nbsp;restart: always<br />&nbsp;&nbsp;environment:<br />&nbsp;&nbsp;&nbsp;&nbsp;MYSQL_ROOT_PASSWORD: 123456<br />&nbsp;&nbsp;&nbsp;&nbsp;MYSQL_DATABASE: gpt-load<br />&nbsp;&nbsp;volumes:<br />&nbsp;&nbsp;&nbsp;&nbsp;- ./data/mysql:/var/lib/mysql<br />&nbsp;&nbsp;healthcheck:<br />&nbsp;&nbsp;&nbsp;&nbsp;test: [\"CMD\", \"mysqladmin\", \"ping\", \"-h\", \"localhost\"]<br />&nbsp;&nbsp;&nbsp;&nbsp;interval: 5s<br />&nbsp;&nbsp;&nbsp;&nbsp;timeout: 5s<br />&nbsp;&nbsp;&nbsp;&nbsp;retries: 10</code></div>",
              "2. 在 <code class=\"bg-gray-100 px-1 rounded\">.env</code> 文件中配置数据库连接：<div class=\"bg-gray-900 text-gray-100 p-4 rounded-lg text-sm\"><code>DATABASE_DSN=root:123456@tcp(mysql:3306)/gpt-load?charset=utf8mb4&parseTime=True&loc=Local</code></div>"
            ]
          },
          {
            "name": "PostgreSQL 配置",
            "steps": [
              "1. 编辑 <code class=\"bg-gray-100 px-1 rounded\">docker-compose.yml</code>，取消 PostgreSQL 服务的注释：<div class=\"bg-gray-900 text-gray-100 p-4 rounded-lg text-sm\"><code>&nbsp;&nbsp;depends_on:<br />&nbsp;&nbsp;&nbsp;&nbsp;postgres:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;condition: service_healthy<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restart: true<br /><br />postgres:<br />&nbsp;&nbsp;image: \"postgres:16\"<br />&nbsp;&nbsp;container_name: gpt-load-postgres<br />&nbsp;&nbsp;environment:<br />&nbsp;&nbsp;&nbsp;&nbsp;POSTGRES_USER: postgres<br />&nbsp;&nbsp;&nbsp;&nbsp;POSTGRES_PASSWORD: 123456<br />&nbsp;&nbsp;&nbsp;&nbsp;POSTGRES_DB: gpt-load<br />&nbsp;&nbsp;volumes:<br />&nbsp;&nbsp;&nbsp;&nbsp;- ./data/postgres:/var/lib/postgresql/data<br />&nbsp;&nbsp;healthcheck:<br />&nbsp;&nbsp;&nbsp;&nbsp;test: [\"CMD-SHELL\", \"pg_isready -U postgres -d \"]<br />&nbsp;&nbsp;&nbsp;&nbsp;interval: 5s<br />&nbsp;&nbsp;&nbsp;&nbsp;timeout: 5s<br />&nbsp;&nbsp;&nbsp;&nbsp;retries: 10</code></div>",
              "2. 在 <code class=\"bg-gray-100 px-1 rounded\">.env</code> 文件中配置数据库连接：<div class=\"bg-gray-900 text-gray-100 p-4 rounded-lg text-sm\"><code>DATABASE_DSN=postgres://postgres:123456@postgres:5432/gpt-load?sslmode=disable</code></div>"
            ]
          }
        ]
      },
      "redis": {
        "title": "Redis 配置",
        "step1": {
          "description": "1. 编辑",
          "action": "，取消 Redis 服务的注释：",
          "code": "&nbsp;&nbsp;depends_on:<br />&nbsp;&nbsp;&nbsp;&nbsp;redis:<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;condition: service_healthy<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;restart: true<br /><br />redis:<br />&nbsp;&nbsp;image: redis:latest<br />&nbsp;&nbsp;container_name: gpt-load-redis<br />&nbsp;&nbsp;restart: always<br />&nbsp;&nbsp;healthcheck:<br />&nbsp;&nbsp;&nbsp;&nbsp;test: [\"CMD\", \"redis-cli\", \"ping\"]<br />&nbsp;&nbsp;&nbsp;&nbsp;interval: 5s<br />&nbsp;&nbsp;&nbsp;&nbsp;timeout: 3s<br />&nbsp;&nbsp;&nbsp;&nbsp;retries: 3"
        },
        "step2": {
          "description": "2. 在",
          "action": "文件中配置 Redis 连接："
        }
      },
      "restart": {
        "title": "重新启动服务",
        "description": "配置完成后，重新启动所有服务：",
        "stopComment": "# 停止服务",
        "startComment": "# 重新启动服务"
      }
    },
    "troubleshooting": {
      "title": "故障排除",
      "commonIssues": {
        "title": "常见问题"
      },
      "items": [
        {
          "title": "无法登录管理界面",
          "description": "请检查您是否使用了正确的管理密钥：",
          "solution": "<ul class=\"text-gray-600 text-sm space-y-1 ml-4\"><li>• 确认 <code class=\"bg-gray-100 px-1 rounded\">.env</code> 文件中的 AUTH_KEY 已修改</li><li>• 重启服务后新密钥才会生效：<code class=\"bg-gray-100 px-1 rounded\">docker compose restart</code></li><li>• 密钥区分大小写，请确保输入正确</li></ul>"
        },
        {
          "title": "端口冲突",
          "description": "如果 3001 端口被占用，可以在 <code class=\"bg-gray-100 px-1 rounded\">.env</code> 文件中修改：",
          "solution": "<div class=\"bg-gray-100 p-2 rounded text-sm\"><code>PORT=3002</code></div>"
        },
        {
          "title": "数据库连接失败",
          "description": "检查数据库服务是否正常启动：",
          "solution": "<div class=\"bg-gray-100 p-2 rounded text-sm\"><code>docker compose logs mysql</code></div>"
        },
        {
          "title": "内存不足",
          "description": "确保系统有足够的内存资源，开发数据库服务后，建议至少 1GB 可用内存",
          "solution": ""
        }
      ]
    },
    "nextSteps": {
      "title": "下一步",
      "description": "部署完成后，您可以：",
      "items": [
        "配置代理密钥和管理 AI 服务分组",
        "添加和管理 AI 服务商 API 密钥",
        "调整系统配置和性能参数",
        "开始使用 API 代理服务"
      ],
      "buttons": {
        "configuration": "查看配置说明",
        "management": "管理端配置"
      }
    }
  },
  "clawCloud": {
    "title": "Claw Cloud 部署",
    "subtitle": "使用 Claw Cloud 免费云端部署 GPT-Load，无需服务器，一键部署，快速体验",
    "warning": {
      "title": "⚠️ 重要提醒：请务必备份您的数据！",
      "description": "Claw Cloud 是实验性免费服务，服务稳定性无法保证，存在以下风险：",
      "risks": [
        "服务可能出现不稳定或临时不可用的情况",
        "数据可能因服务故障而丢失",
        "免费服务没有 SLA 保障",
        "实例可能会被重启或重新分配"
      ],
      "recommendation": {
        "title": "🔄 强烈建议：",
        "items": [
          "定期导出和备份您的配置数据",
          "保存好所有重要的 API 密钥和配置信息",
          "对于生产环境，请考虑使用稳定的付费云服务",
          "将 Claw Cloud 仅用于测试和学习目的"
        ]
      }
    },
    "overview": {
      "title": "服务概览",
      "service": {
        "title": "Claw Cloud 免费部署",
        "description": "轻量级云端部署方案，使用 SQLite 数据库和内存存储，完全免费的 5 美元月度额度"
      },
      "features": {
        "freeQuota": {
          "title": "免费额度",
          "description": "每月 5 美元免费使用额度"
        },
        "globalDeploy": {
          "title": "全球部署",
          "description": "支持多个地区部署，优化访问速度"
        },
        "simpleAuth": {
          "title": "简单认证",
          "description": "仅需 GitHub 账号即可开始使用"
        }
      }
    },
    "prerequisites": {
      "title": "前提条件",
      "accountRequirement": {
        "title": "账号要求",
        "description": "需要拥有半年以上的 GitHub 账号才能使用 Claw Cloud 服务"
      },
      "serviceFeatures": {
        "title": "服务特性",
        "freeQuota": {
          "title": "免费额度",
          "items": [
            "• 每月 5 美元免费使用额度",
            "• 适合个人用户和小规模测试",
            "• 无需信用卡验证",
            "• 超额后可选择付费继续使用"
          ]
        },
        "techSpecs": {
          "title": "技术规格",
          "items": [
            "• 使用 SQLite 数据库",
            "• 内存存储（无 Redis）",
            "• 自动备份和恢复",
            "• 内置监控和日志"
          ]
        }
      }
    },
    "deploymentSteps": {
      "title": "部署步骤",
      "step1": {
        "title": "注册并登录",
        "githubLogin": {
          "title": "使用 GitHub 登录 Claw Cloud",
          "description": "访问 Claw Cloud 官网并点击 Get started for free ，使用 GitHub 账号进行登录。"
        },
        "regionSelection": {
          "title": "选择部署区域",
          "description": "登录后在左上角选择合适的部署区域：",
          "recommended": "推荐区域：",
          "regions": [
            "• Singapore - 新加坡",
            "• Japan - 日本"
          ]
        },
        "image": {
          "alt": "Claw Cloud 区域选择界面",
          "caption": "Claw Cloud 区域选择界面"
        }
      },
      "step2": {
        "title": "创建应用",
        "launchApp": {
          "title": "启动应用创建",
          "description": "点击中间的 \"App Launchpad\"，然后点击右上角的 \"Create App\" 开始创建应用"
        },
        "image": {
          "alt": "Claw Cloud 创建应用界面",
          "caption": "App Launchpad - 创建应用"
        }
      },
      "step3": {
        "title": "配置应用",
        "form": {
          "title": "填写应用配置表单",
          "basic": {
            "title": "Basic（基础信息）",
            "appName": {
              "label": "Application Name",
              "value": "gpt-load"
            },
            "image": {
              "label": "Image",
              "value": "选择 Public"
            },
            "imageName": {
              "label": "Image Name",
              "value": "ghcr.io/tbphp/gpt-load:latest"
            }
          },
          "usage": {
            "title": "Usage（资源配置）",
            "usage": {
              "label": "Usage",
              "value": "Fixed"
            },
            "replicas": {
              "label": "Replicas",
              "value": "1"
            },
            "cpu": {
              "label": "CPU",
              "value": "1 (可根据需要调整)"
            },
            "memory": {
              "label": "Memory",
              "value": "512M (可根据需要调整)"
            }
          },
          "resourceTip": {
            "title": "资源配置建议",
            "description": "按照 5 美元额度计算，建议配置为 CPU: 1, Memory: 512M。如果个人使用且网络流量较小，可以降低配置以节省费用。"
          }
        },
        "network": {
          "title": "Network（网络配置）",
          "containerPort": {
            "label": "Container Port",
            "value": "3001"
          },
          "publicAccess": {
            "label": "Public Access",
            "value": "✅ 开启"
          }
        },
        "environment": {
          "title": "Environment Variables（环境变量）",
          "description": "点击 \"Environment Variables\" 添加以下配置：",
          "authKey": {
            "label": "AUTH_KEY",
            "value": "sk-your-custom-key"
          },
          "warning": "⚠️ 请将 sk-your-custom-key 替换为您自己的密码，不要使用默认值或公开分享"
        },
        "storage": {
          "title": "Local Storage（存储配置）",
          "localStorage": {
            "label": "Local Storage",
            "value": "点击 \"Add\" 添加存储"
          },
          "capacity": {
            "label": "Capacity",
            "value": "1G"
          },
          "mountPath": {
            "label": "Mount Path",
            "value": "/app/data"
          },
          "note": "配置完成后点击 \"Confirm\" 保存存储配置"
        },
        "image": {
          "alt": "Claw Cloud 应用配置界面",
          "caption": "应用配置表单"
        }
      },
      "step4": {
        "title": "部署应用",
        "startDeploy": {
          "title": "启动部署",
          "description": "配置完成后，点击右上角的 \"Deploy Application\" 按钮开始部署应用"
        },
        "completed": {
          "title": "部署完成",
          "description": "整个创建流程非常简单方便！部署完成后，需要等待公网地址生效，过程可能需要几分钟。"
        },
        "waitService": {
          "title": "等待服务启动",
          "description": "耐心等待 \"Public Address\" 的状态变为绿色的 \"Available\"，就可以访问您的 GPT-Load 服务了"
        }
      }
    },
    "accessUsage": {
      "title": "访问和使用",
      "firstAccess": {
        "title": "首次访问",
        "getAddress": {
          "title": "获取访问地址",
          "description": "部署完成后，在 Claw Cloud 控制台中可以看到您的应用公网地址",
          "example": {
            "label": "访问地址类似",
            "value": "https://ax***fta.region.clawcloudrun.com"
          }
        },
        "login": {
          "title": "登录管理界面",
          "description": "访问您的应用地址，使用配置的 AUTH_KEY 登录管理界面",
          "securityTip": {
            "title": "安全提示",
            "description": "请确保您的 AUTH_KEY 是安全的，不要在公共场所或文档中分享"
          }
        }
      },
      "apiUsage": {
        "title": "API 使用",
        "proxyAddress": {
          "title": "API 代理地址",
          "label": "API 代理端点：",
          "value": "https://ax***fta.region.clawcloudrun.com/proxy/{group_name}"
        },
        "example": {
          "title": "使用示例",
          "code": "curl -X POST https://ax***fta.region.clawcloudrun.com/proxy/openai/v1/chat/completions \\\n  -H \"Authorization: Bearer your-auth-key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"model\": \"gpt-4o-mini\", \"messages\": [{\"role\": \"user\", \"content\": \"Hello\"}]}'"
        }
      }
    },
    "updateMaintenance": {
      "title": "更新和维护",
      "versionUpdate": {
        "title": "版本更新",
        "steps": {
          "title": "更新步骤",
          "items": [
            "进入 App Launchpad，选择您创建的应用",
            "点击右上角的 \"Update\" 按钮",
            "在更新页面，无需修改任何配置，直接点击 \"Update\" 按钮",
            "等待更新和重启完成"
          ]
        },
        "autoUpdate": {
          "title": "自动更新",
          "description": "更新过程会自动拉取最新版本的镜像，无需手动配置"
        }
      },
      "monitoring": {
        "title": "监控和日志",
        "appMonitoring": {
          "title": "应用监控",
          "items": [
            "• 在 Claw Cloud 控制台查看应用状态",
            "• 监控资源使用情况和费用",
            "• 查看应用运行日志",
            "• 设置告警和通知"
          ]
        },
        "costControl": {
          "title": "费用控制",
          "items": [
            "• 定期查看月度用量和费用",
            "• 根据实际使用情况调整资源配置",
            "• 设置费用预算和告警",
            "• 考虑在低峰期暂停服务"
          ]
        }
      }
    },
    "troubleshooting": {
      "title": "故障排除",
      "commonIssues": {
        "title": "常见问题",
        "appNotStart": {
          "title": "应用无法启动",
          "cause": "可能的原因：镜像拉取失败、配置错误或资源不足",
          "solution": "解决方案：检查应用日志，确认镜像地址和配置正确"
        },
        "accessFailed": {
          "title": "无法访问公网地址",
          "cause": "可能的原因：DNS 传播延迟或网络问题",
          "solution": "解决方案：等待几分钟后重试，检查网络连接"
        },
        "authFailed": {
          "title": "认证失败",
          "cause": "可能的原因：AUTH_KEY 配置错误或未设置",
          "solution": "解决方案：检查环境变量配置，确保 AUTH_KEY 正确"
        }
      }
    },
    "nextSteps": {
      "title": "下一步",
      "description": "Claw Cloud 部署完成后，您可以：",
      "tasks": [
        "通过 Web 管理界面配置 AI 服务",
        "添加 API 密钥开始使用代理服务",
        "监控使用情况和费用",
        "根据需要升级到更高配置"
      ],
      "buttons": {
        "configuration": "配置说明",
        "management": "管理端配置"
      }
    }
  },
  "imageViewer": {
    "closeButton": "关闭 (Esc)",
    "instructions": "按 Esc 键或点击背景关闭",
    "clickToEnlarge": "点击图片放大查看"
  },
  "docsQuickStart": {
    "title": "快速开始",
    "subtitle": "通过以下步骤快速启动和运行 GPT-Load。",
    "quickLaunch": {
      "title": "快速启动",
      "lightweightDeployment": {
        "title": "轻量化部署",
        "description": "使用 SQLite 数据库和内存存储，最适合个人使用和快速体验"
      }
    },
    "requirements": {
      "title": "环境要求",
      "docker": "Docker 20.10+ 和 Docker Compose",
      "os": "Linux/macOS/Windows 操作系统",
      "resources": "至少 128MB 内存和 1GB 磁盘空间"
    },
    "installation": {
      "title": "安装步骤"
    },
    "security": {
      "title": "重要安全提醒",
      "warning": "在部署之前，您必须修改默认的管理密钥！",
      "requirements": {
        "complex": "使用至少 20 个字符的复杂密钥",
        "characters": "包含大小写字母、数字和特殊字符",
        "avoid": "绝不使用",
        "simpleKeys": "等默认或简单密钥",
        "productionRisk": "生产环境中使用弱密钥将面临严重安全风险"
      },
      "recommendedFormat": "建议密钥格式",
      "randomString": "随机字符串",
      "characters": "位"
    },
    "steps": {
      "createDirectory": {
        "title": "创建工作目录",
        "comment": "创建目录并进入"
      },
      "downloadConfig": {
        "title": "下载配置文件",
        "dockerComment": "下载 Docker Compose 配置",
        "envComment": "下载环境变量配置",
        "securityConfig": {
          "title": "立即修改安全配置",
          "editFile": "编辑",
          "changeFrom": "文件，将以下内容：",
          "changeTo": "修改为强密钥："
        }
      },
      "startServices": {
        "title": "启动服务",
        "comment": "启动 GPT-Load 服务"
      },
      "verify": {
        "title": "验证部署",
        "accessAdmin": "访问管理界面",
        "useAuthKey": "使用您在",
        "fileSet": "文件中设置的",
        "login": "登录管理界面"
      }
    },
    "commands": {
      "title": "常用命令",
      "checkStatus": "查看状态",
      "viewLogs": "查看日志",
      "restart": "重启服务",
      "update": "更新版本"
    },
    "nextSteps": {
      "description": "想了解更多部署选项，例如使用 MySQL/PostgreSQL 或进行集群部署吗？请查看完整的",
      "deploymentGuide": "部署指南",
      "period": "。"
    }
  },
  "architectureDesign": {
    "title": "系统架构",
    "subtitle": "深入了解 GPT-Load 的技术架构和设计理念",
    "overview": {
      "title": "架构概览",
      "highlightTitle": "高性能透明代理架构",
      "highlightDescription": "基于 Go 语言构建的高性能 OpenAI API 代理服务，支持多密钥轮换、负载均衡和智能故障切换"
    },
    "components": {
      "apiGateway": {
        "title": "API 网关",
        "description": "统一的 API 入口和路由"
      },
      "loadBalancer": {
        "title": "负载均衡",
        "description": "智能密钥轮换和分发"
      },
      "dataStorage": {
        "title": "数据存储",
        "description": "MySQL + Redis 双重存储"
      },
      "securityMonitor": {
        "title": "安全监控",
        "description": "限流、认证和监控"
      }
    },
    "systemComponents": {
      "title": "系统组件",
      "coreService": {
        "title": "核心服务层",
        "apiProxy": {
          "title": "API 代理服务",
          "features": ["HTTP/HTTPS 透明代理", "请求路由和转发", "响应流式处理", "错误处理和重试"]
        },
        "loadBalancer": {
          "title": "负载均衡器",
          "features": ["轮询（Round Robin）算法", "权重分配策略", "健康检查机制", "故障自动切换"]
        }
      },
      "managementLayer": {
        "title": "管理服务层",
        "webInterface": {
          "title": "Web 管理界面",
          "features": ["Vue 3 + TypeScript", "Naive UI 组件库", "实时监控面板", "配置管理界面"]
        },
        "restApi": {
          "title": "REST API",
          "features": ["密钥管理接口", "统计数据接口", "系统配置接口", "监控指标接口"]
        }
      },
      "dataLayer": {
        "title": "数据存储层",
        "mysql": {
          "title": "MySQL 数据库",
          "features": ["密钥和配置持久化", "用户认证数据", "历史统计记录", "系统日志存储"]
        },
        "redis": {
          "title": "Redis 缓存",
          "features": ["密钥状态缓存", "限流计数器", "分布式锁机制", "会话状态管理"]
        }
      }
    },
    "dataFlow": {
      "title": "数据流向",
      "steps": [
        {
          "title": "客户端请求",
          "description": "API 网关接收 OpenAI 兼容请求"
        },
        {
          "title": "密钥选择",
          "description": "负载均衡器选择可用的 API 密钥"
        },
        {
          "title": "请求转发",
          "description": "代理服务转发请求到 OpenAI API"
        },
        {
          "title": "响应处理",
          "description": "流式响应处理并返回给客户端"
        },
        {
          "title": "数据记录",
          "description": "统计数据和日志记录到数据库"
        }
      ]
    },
    "deploymentArchitectures": {
      "title": "部署架构",
      "standalone": {
        "title": "单机部署",
        "scenarios": {
          "title": "适用场景",
          "items": ["中小规模应用", "开发测试环境", "个人项目使用"]
        }
      },
      "cluster": {
        "title": "集群部署",
        "scenarios": {
          "title": "适用场景",
          "items": ["大规模生产环境", "高可用性要求", "企业级应用"]
        }
      }
    },
    "techStack": {
      "title": "技术栈",
      "backend": {
        "title": "后端技术",
        "items": ["Go 1.23+", "Gin Web 框架", "GORM ORM", "Go-Redis"]
      },
      "frontend": {
        "title": "前端技术",
        "items": ["Vue 3", "TypeScript", "Naive UI", "Vite"]
      },
      "infrastructure": {
        "title": "基础设施",
        "items": ["MySQL 8.2+", "Redis", "Docker", "Nginx"]
      }
    },
    "designPrinciples": {
      "title": "设计原则",
      "highPerformance": {
        "title": "高性能",
        "description": "基于 Go 语言的高并发处理能力，支持数千 QPS 的请求处理"
      },
      "highAvailability": {
        "title": "高可用",
        "description": "故障自动切换、健康检查和分布式部署保障服务可用性"
      },
      "scalability": {
        "title": "可扩展",
        "description": "模块化设计和微服务架构，支持水平扩展和功能扩展"
      },
      "transparentProxy": {
        "title": "透明代理",
        "description": "完全兼容 OpenAI API，无需修改现有代码即可接入"
      }
    }
  },
    "seo": {
    "pages": {
      "home": {
        "title": "GPT-Load - 高性能 AI 接口透明代理服务",
        "description": "企业级 AI 接口透明代理服务，完全保留各 AI 服务商的原生 API 格式。提供密钥轮询、多分组管理、负载均衡等功能。",
        "keywords": "GPT, OpenAI, API, 透明代理, 负载均衡, 密钥轮询, Go, 高性能, AI代理, Gemini, Claude"
      },
      "docs": {
        "quickStart": {
          "title": "快速开始 - GPT-Load 部署指南",
          "description": "5分钟快速部署GPT-Load，Docker一键启动，包含完整的数据库和缓存服务。",
          "keywords": "GPT-Load部署, Docker部署, 快速开始, AI代理安装"
        }
      },
      "introduction": {
        "title": "项目简介 - GPT-Load 架构与技术栈详解",
        "description": "深入了解GPT-Load的核心概念、技术架构、支持的AI服务和企业级功能特性。",
        "keywords": "GPT-Load架构, AI代理技术, 透明代理原理, 微服务架构, Go语言"
      }
    }
  },
  "keyManagement": {
    "title": "智能密钥管理",
    "subtitle": "GPT-Load 采用智能密钥管理机制，通过轮询负载均衡、自动故障检测和恢复机制，确保服务的高可用性和稳定性。",
    "polling": {
      "title": "轮询机制",
      "objective": {
        "title": "目标",
        "description": "实现请求在分组内多个密钥间的公平负载均衡。"
      },
      "implementation": {
        "title": "实现方式",
        "atomicCounter": {
          "title": "原子计数器",
          "description": "保证高并发下的轮询一致性和公平性"
        },
        "statusFilter": {
          "title": "状态过滤",
          "description": "轮询范围仅限于分组内状态为\"有效\"的密钥"
        }
      }
    },
    "retry": {
      "title": "重试与故障处理",
      "trigger": {
        "title": "触发场景",
        "description": "当请求失败时（HTTP Status ≥ 400 或网络错误）自动触发"
      },
      "process": {
        "title": "处理流程",
        "step1": {
          "title": "标记失败",
          "description": "为当前失败的密钥失败计数加一"
        },
        "step2": {
          "title": "获取新密钥",
          "description": "立即通过轮询机制获取分组内下一个可用密钥"
        },
        "step3": {
          "title": "无感重试",
          "description": "使用新密钥重新发起请求，此过程对客户端无感"
        },
        "step4": {
          "title": "重试上限",
          "description": "配置的最大重试次数。若所有尝试均失败，则向客户端返回最终错误"
        }
      }
    },
    "blacklist": {
      "title": "密钥拉黑与恢复",
      "mechanism": {
        "title": "拉黑机制",
        "trigger": {
          "title": "触发条件",
          "description": "当密钥的累计失败计数达到黑名单阈值"
        },
        "actions": {
          "title": "执行动作",
          "items": [
            "密钥状态更新为\"无效\"",
            "从轮询队列中移除，不再接收新请求"
          ]
        }
      }
    },
    "recovery": {
      "title": "恢复机制",
      "timing": {
        "title": "触发时机",
        "description": "后台定时任务，按密钥验证间隔周期执行"
      },
      "process": {
        "title": "恢复流程",
        "step1": {
          "title": "健康检查",
          "description": "使用被拉黑的密钥请求验证接口（如 models 列表）"
        },
        "step2": {
          "title": "验证成功",
          "items": [
            "密钥状态恢复为\"有效\"",
            "失败计数重置为 0",
            "重新加入轮询队列"
          ]
        },
        "step3": {
          "title": "验证失败",
          "description": "保持\"无效\"状态，等待下一个检查周期"
        }
      }
    },
    "advantages": {
      "title": "机制优势",
      "loadBalancing": {
        "title": "负载均衡",
        "description": "原子计数器保证高并发下的公平轮询"
      },
      "autoRecovery": {
        "title": "自动恢复",
        "description": "定时健康检查，故障密钥自动恢复"
      },
      "faultIsolation": {
        "title": "故障隔离",
        "description": "快速识别故障密钥，确保服务稳定性"
      }
    }
  },
  "routingStrategy": {
    "title": "路径设计策略",
    "subtitle": "理解 GPT-Load 的路径处理机制，掌握灵活的路径配置方法，确保客户端与上游服务的正确连接。",
    "coreProcessing": {
      "title": "路径处理原理",
      "transparentPrinciple": {
        "title": "透传原则",
        "description": "GPT-Load 遵循透传原则，仅负责路径替换，保持最大的灵活性。核心逻辑是将客户端请求中的代理前缀替换为实际的上游地址。",
        "rule": "替换规则：GPT-Load服务地址 + /proxy/ + 分组名    替换为    上游地址"
      }
    },
    "processingFlow": {
      "title": "处理流程示例",
      "serviceAddress": "服务地址",
      "upstreamAddress": "上游地址",
      "groupName": "分组名",
      "clientRequest": "客户端请求",
      "actualRequest": "实际请求"
    },
    "configurationMethods": {
      "title": "配置方式详解",
      "description": "以 OpenRouter 为例（完整路径：https://openrouter.ai/api/v1/chat/completions），分组名为 openrouter，渠道类型为 openai：",
      "method1": {
        "title": "配置方式一：域名分离",
        "gptLoadConfig": "GPT-Load 配置",
        "upstreamAddress": "上游地址",
        "testPath": "测试路径",
        "clientConfig": "客户端配置",
        "cherryStudioApi": "Cherry Studio API地址"
      },
      "method2": {
        "title": "配置方式二：包含 API 路径（推荐）",
        "gptLoadConfig": "GPT-Load 配置",
        "upstreamAddress": "上游地址",
        "testPath": "测试路径",
        "clientConfig": "客户端配置",
        "cherryStudioApi": "Cherry Studio API地址"
      },
      "method3": {
        "title": "配置方式三：完整版本路径",
        "gptLoadConfig": "GPT-Load 配置",
        "upstreamAddress": "上游地址",
        "testPath": "测试路径",
        "clientConfig": "客户端配置",
        "cherryStudioApi": "Cherry Studio API地址",
        "note": "注意：必须以 / 结尾，避免客户端自动拼接 v1 路径"
      }
    },
    "bestPractices": {
      "title": "最佳实践",
      "configurationSuggestions": {
        "title": "配置建议",
        "items": [
          "• 推荐使用配置方式二，结构清晰易理解",
          "• 先确定完整的上游 API 地址",
          "• 根据客户端特性选择合适的路径分割点",
          "• 保持配置的一致性和可维护性"
        ]
      },
      "debuggingTips": {
        "title": "调试技巧",
        "items": [
          "• 查看 GPT-Load 请求日志确认上游地址",
          "• 使用测试路径验证配置正确性",
          "• 注意客户端的路径拼接规则",
          "• 灵活调整配置以适应不同场景"
        ]
      }
    },
    "summary": {
      "title": "配置要点总结",
      "description": "理解路径处理逻辑是关键：GPT-Load 只负责简单的字符串替换，灵活的配置方式能适应各种客户端和上游服务的需求。",
      "corePrinciple": "核心原则",
      "principle": "确保测试地址和客户端请求地址经过 GPT-Load 代理后，最终请求的上游地址正确无误。"
    }
  },
  "channels": {
    "title": "渠道类型",
    "subtitle": "GPT-Load 支持多种主流 AI 服务提供商，提供完全透明的代理访问，保持原生 API 格式和体验。",
    "supportedServices": {
      "title": "支持的服务",
      "openai": {
        "title": "OpenAI",
        "features": [
          "Chat Completions API",
          "Embeddings API",
          "Images API",
          "Audio API",
          "Files API",
          "Models API"
        ]
      },
      "gemini": {
        "title": "Google Gemini",
        "features": [
          "Generate Content API",
          "Streaming Support",
          "Multi-modal Inputs",
          "Safety Settings",
          "Generation Config",
          "Models Management"
        ]
      },
      "claude": {
        "title": "Anthropic Claude",
        "features": [
          "Messages API",
          "Streaming Responses",
          "System Prompts",
          "Tool Use",
          "Token Counting",
          "Models Access"
        ]
      },
      "extensibility": {
        "title": "扩展性",
        "description": "架构设计支持快速添加新的 AI 服务提供商，通过标准化的接口适配层实现统一访问。"
      }
    },
    "proxyFormat": {
      "title": "代理格式",
      "unifiedEndpoint": {
        "title": "统一代理端点",
        "format": "http://localhost:3001/proxy/{group-name}"
      },
      "parameters": {
        "title": "参数说明",
        "items": [
          "group-name: 在管理界面创建的分组名称",
          "支持任意路径后缀，完全透明转发",
          "保持原始 API 的所有功能特性"
        ]
      },
      "authentication": {
        "title": "认证方式",
        "items": [
          "使用原始服务的 API Key",
          "通过 Authorization: Bearer {token} 头传递",
          "支持分组级别的密钥轮询和负载均衡"
        ]
      }
    },
    "openaiFormat": {
      "title": "OpenAI 格式接入",
      "authentication": {
        "title": "认证配置",
        "description": "GPT-Load 完全兼容 OpenAI SDK，只需更改 base_url 即可无缝切换。"
      },
      "examples": {
        "original": {
          "title": "原始 OpenAI 请求",
          "code": "curl https://api.openai.com/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"model\": \"gpt-4\",\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"Hello!\"\n      }\n    ]\n  }'"
        },
        "proxy": {
          "title": "通过 GPT-Load 代理",
          "code": "curl http://localhost:3001/proxy/openai/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"model\": \"gpt-4\",\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": \"Hello!\"\n      }\n    ]\n  }'"
        }
      },
      "migration": {
        "step1": "仅需更改 API 基础地址，其他代码完全不变",
        "step2": "支持所有 OpenAI SDK 的功能特性"
      },
      "endpoints": {
        "title": "支持的端点",
        "main": {
          "title": "核心接口",
          "items": [
            "/v1/chat/completions - 聊天补全",
            "/v1/embeddings - 向量嵌入",
            "/v1/images/generations - 图像生成",
            "/v1/audio/speech - 语音合成",
            "/v1/audio/transcriptions - 语音转文字"
          ]
        },
        "other": {
          "title": "其他接口",
          "items": [
            "/v1/models - 模型列表",
            "/v1/files - 文件管理",
            "/v1/fine_tuning/jobs - 微调任务",
            "/v1/assistants - 助手接口",
            "/v1/threads - 对话线程"
          ]
        }
      },
      "sdk": {
        "title": "SDK 配置",
        "python": {
          "title": "Python SDK",
          "code": "from openai import OpenAI\n\nclient = OpenAI(\n    api_key=\"your-openai-api-key\",\n    base_url=\"http://localhost:3001/proxy/openai\"\n)\n\nresponse = client.chat.completions.create(\n    model=\"gpt-4\",\n    messages=[\n        {\"role\": \"user\", \"content\": \"Hello!\"}\n    ]\n)"
        },
        "nodejs": {
          "title": "Node.js SDK",
          "code": "import OpenAI from 'openai';\n\nconst openai = new OpenAI({\n  apiKey: 'your-openai-api-key',\n  baseURL: 'http://localhost:3001/proxy/openai'\n});\n\nconst response = await openai.chat.completions.create({\n  model: 'gpt-4',\n  messages: [\n    { role: 'user', content: 'Hello!' }\n  ]\n});"
        }
      }
    },
    "geminiFormat": {
      "title": "Gemini 格式接入",
      "authentication": {
        "title": "认证配置",
        "description": "完全兼容 Google Gemini API，支持所有原生功能，包括多模态输入和流式响应。"
      },
      "examples": {
        "original": {
          "title": "原始 Gemini 请求",
          "code": "curl https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=$API_KEY \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"contents\": [{\n      \"parts\": [{\n        \"text\": \"Write a story about a magic backpack.\"\n      }]\n    }]\n  }'"
        },
        "proxy": {
          "title": "通过 GPT-Load 代理",
          "code": "curl http://localhost:3001/proxy/gemini/v1beta/models/gemini-pro:generateContent?key=$API_KEY \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"contents\": [{\n      \"parts\": [{\n        \"text\": \"Write a story about a magic backpack.\"\n      }]\n    }]\n  }'"
        }
      },
      "migration": {
        "step1": "替换请求基础地址为 GPT-Load 代理地址",
        "step2": "保持所有参数和认证方式不变"
      },
      "endpoints": {
        "title": "支持的端点",
        "content": {
          "title": "内容生成",
          "items": [
            "/v1beta/models/*/generateContent - 内容生成",
            "/v1beta/models/*/streamGenerateContent - 流式生成",
            "/v1beta/models/*/countTokens - 令牌计数",
            "/v1beta/models/*/embedContent - 向量嵌入"
          ]
        },
        "models": {
          "title": "模型管理",
          "items": [
            "/v1beta/models - 模型列表",
            "/v1beta/models/* - 模型详情",
            "/v1beta/tuning/createTunedModel - 微调创建",
            "/v1beta/tuning/tunedModels - 微调列表"
          ]
        }
      },
      "sdk": {
        "title": "SDK 配置",
        "python": {
          "title": "Python SDK",
          "code": "import google.generativeai as genai\n\n# 配置 API Key\ngenai.configure(\n    api_key=\"your-gemini-api-key\",\n    client_options={\"api_endpoint\": \"http://localhost:3001/proxy/gemini\"}\n)\n\nmodel = genai.GenerativeModel('gemini-pro')\nresponse = model.generate_content(\"Hello!\")"
        },
        "http": {
          "title": "HTTP 请求",
          "code": "POST http://localhost:3001/proxy/gemini/v1beta/models/gemini-pro:generateContent?key=YOUR_API_KEY\nContent-Type: application/json\n\n{\n  \"contents\": [{\n    \"parts\": [{\n      \"text\": \"Explain how AI works\"\n    }]\n  }]\n}"
        }
      }
    },
    "claudeFormat": {
      "title": "Claude 格式接入",
      "authentication": {
        "title": "认证配置",
        "description": "完全兼容 Anthropic Claude API，支持 Messages API、工具使用、流式响应等所有高级功能。"
      },
      "examples": {
        "original": {
          "title": "原始 Claude 请求",
          "code": "curl https://api.anthropic.com/v1/messages \\\n  -H \"Content-Type: application/json\" \\\n  -H \"x-api-key: $ANTHROPIC_API_KEY\" \\\n  -H \"anthropic-version: 2023-06-01\" \\\n  -d '{\n    \"model\": \"claude-3-sonnet-20240229\",\n    \"max_tokens\": 1024,\n    \"messages\": [\n      {\"role\": \"user\", \"content\": \"Hello, Claude\"}\n    ]\n  }'"
        },
        "proxy": {
          "title": "通过 GPT-Load 代理",
          "code": "curl http://localhost:3001/proxy/claude/v1/messages \\\n  -H \"Content-Type: application/json\" \\\n  -H \"x-api-key: $ANTHROPIC_API_KEY\" \\\n  -H \"anthropic-version: 2023-06-01\" \\\n  -d '{\n    \"model\": \"claude-3-sonnet-20240229\",\n    \"max_tokens\": 1024,\n    \"messages\": [\n      {\"role\": \"user\", \"content\": \"Hello, Claude\"}\n    ]\n  }'"
        }
      },
      "migration": {
        "step1": "更新 API 基础地址为 GPT-Load 代理端点",
        "step2": "保持所有头部信息和请求格式不变"
      },
      "endpoints": {
        "title": "支持的端点",
        "main": {
          "title": "核心接口",
          "items": [
            "/v1/messages - 消息对话",
            "/v1/messages/streaming - 流式对话",
            "/v1/complete - 文本补全（Legacy）",
            "/v1/tools - 工具使用"
          ]
        },
        "models": {
          "title": "模型管理",
          "items": [
            "/v1/models - 可用模型列表",
            "支持 Claude-3 全系列模型",
            "支持自定义 max_tokens 限制",
            "支持系统提示词设置"
          ]
        }
      },
      "sdk": {
        "title": "SDK 配置",
        "python": {
          "title": "Python SDK",
          "code": "from anthropic import Anthropic\n\nclient = Anthropic(\n    api_key=\"your-claude-api-key\",\n    base_url=\"http://localhost:3001/proxy/claude\"\n)\n\nmessage = client.messages.create(\n    model=\"claude-3-sonnet-20240229\",\n    max_tokens=1024,\n    messages=[\n        {\"role\": \"user\", \"content\": \"Hello!\"}\n    ]\n)"
        },
        "http": {
          "title": "HTTP 请求",
          "code": "POST http://localhost:3001/proxy/claude/v1/messages\nContent-Type: application/json\nx-api-key: YOUR_API_KEY\nanthropic-version: 2023-06-01\n\n{\n  \"model\": \"claude-3-sonnet-20240229\",\n  \"max_tokens\": 1024,\n  \"messages\": [\n    {\"role\": \"user\", \"content\": \"Hello!\"}\n  ]\n}"
        }
      }
    },
    "groupManagement": {
      "title": "分组管理",
      "creation": {
        "title": "创建分组",
        "steps": [
          "访问 GPT-Load 管理界面",
          "进入\"环境管理\" -> \"分组设置\"",
          "点击\"新增分组\"填写分组信息",
          "选择对应的渠道类型（OpenAI/Gemini/Claude）",
          "配置上游地址和测试路径",
          "添加 API 密钥并测试连接",
          "保存配置并启用分组"
        ]
      },
      "configuration": {
        "title": "配置要点",
        "items": [
          "分组名将作为代理路径的一部分",
          "支持一个分组配置多个 API 密钥",
          "自动进行密钥轮询和负载均衡",
          "支持密钥健康检查和故障转移",
          "可设置请求频率限制和配额管理"
        ]
      }
    },
    "migration": {
      "title": "迁移指南",
      "guide": {
        "title": "迁移步骤",
        "steps": [
          {
            "title": "评估现状",
            "description": "分析当前使用的 AI 服务和 API 调用方式"
          },
          {
            "title": "部署 GPT-Load",
            "description": "按照快速开始指南部署 GPT-Load 服务"
          },
          {
            "title": "更新配置",
            "description": "修改应用中的 API 基础地址指向 GPT-Load"
          }
        ]
      },
      "seamless": {
        "title": "无缝迁移",
        "description": "GPT-Load 的设计理念是完全透明，迁移过程中无需修改业务逻辑，只需更改 API 端点地址即可享受统一管理和负载均衡的好处。"
      }
    },
    "summary": {
      "title": "总结",
      "transparent": {
        "title": "透明代理",
        "features": [
          "保持原生 API 格式",
          "无需修改业务代码",
          "支持所有功能特性"
        ]
      },
      "unified": {
        "title": "统一管理",
        "features": [
          "多服务统一接入",
          "集中密钥管理",
          "统一监控告警"
        ]
      },
      "scalable": {
        "title": "高可扩展",
        "features": [
          "负载均衡与故障转移",
          "水平扩展支持",
          "企业级性能保障"
        ]
      }
    }
  },
  "performance": {
    "title": "性能详解",
    "subtitle": "GPT-Load 采用\"代理路径优先\"的高性能设计哲学，一切优化都为保障核心代理请求的极致性能和稳定性。",
    "coreFeatures": {
      "title": "核心性能特性",
      "zeroIO": {
        "title": "零 I/O 操作",
        "description": "代理请求全内存处理"
      },
      "zeroCopy": {
        "title": "零拷贝流传输",
        "description": "直接流式数据转发"
      },
      "lockFree": {
        "title": "无锁并发",
        "description": "原子操作高效处理"
      },
      "lowResource": {
        "title": "极低资源占用",
        "description": "单核 128MB 内存运行"
      }
    },
    "proxyPerformance": {
      "title": "极致的代理请求性能",
      "description": "为了实现最低延迟和最高并发，代理请求的核心路径被设计为\"零 I/O 操作\"。",
      "inMemory": {
        "title": "全内存服务",
        "description": "所有路由和决策所需的数据，包括分组配置、密钥信息等，都在服务启动和配置变更时预加载到内存中。代理请求期间无需任何数据库或磁盘访问。"
      },
      "zeroCopyStreaming": {
        "title": "零拷贝流式传输 (Zero-Copy Streaming)",
        "mechanism": {
          "title": "实时透传机制",
          "description": "GPT-Load 采用实时透传模式，直接将上游服务的数据流对接到客户端响应，不进行任何中间缓冲、按行读取或内容解析。"
        },
        "comparison": {
          "title": "与传统流式处理的区别",
          "traditional": {
            "label": "❌ 传统方式",
            "flow": "按行读取 → 解析处理 → 缓冲输出"
          },
          "gptLoad": {
            "label": "✅ GPT-Load 方式",
            "flow": "上游数据流 → 直接透传 → 客户端"
          }
        },
        "advantages": {
          "title": "核心优势",
          "leftColumn": [
            {
              "title": "避免数据包截断",
              "description": "不会因按行读取而破坏原始数据包结构"
            },
            {
              "title": "极致兼容性",
              "description": "天然支持 SSE、JSON 流、二进制等所有数据格式"
            },
            {
              "title": "无限响应能力",
              "description": "理论上可处理任意大小的上游响应数据"
            }
          ],
          "rightColumn": [
            {
              "title": "零延迟传输",
              "description": "数据到达即转发，无缓冲等待时间"
            },
            {
              "title": "极低内存占用",
              "description": "不缓存数据，内存使用量与响应大小无关"
            },
            {
              "title": "原生性能体验",
              "description": "响应速度无限贴近上游服务原生表现"
            }
          ]
        }
      },
      "asyncLogging": {
        "title": "异步日志",
        "description": "请求日志的记录采用延迟异步写入策略，完全与请求-响应生命周期解耦，确保日志操作不会对实时代理性能产生任何干扰。"
      }
    },
    "resourceManagement": {
      "title": "动态资源与并发管理",
      "httpReuse": {
        "title": "HTTP 客户端高效复用",
        "features": [
          "为每个分组维护独立的、可复用底层连接的 HTTP 客户端实例",
          "当分组配置（如超时）变更时，系统会实时动态地生成新客户端实例，确保配置即时生效"
        ]
      },
      "atomicOperations": {
        "title": "原子操作与无锁设计",
        "description": "在密钥轮询计数等高频并发操作中，使用 sync/atomic 包进行无锁化编程，避免了互斥锁（Mutex）带来的性能开销。"
      }
    },
    "asyncTasks": {
      "title": "异步任务与可扩展性",
      "massiveKeys": {
        "title": "海量密钥的异步管理",
        "mechanism": {
          "title": "机制",
          "description": "添加和验证密钥等操作均作为异步后台任务执行。"
        },
        "advantage": {
          "title": "优势",
          "description": "使得管理操作不会阻塞服务，理论上允许系统管理百万级别的海量密钥。"
        }
      },
      "clusterSupport": {
        "title": "集群支持与配置同步",
        "architecture": {
          "title": "架构",
          "description": "支持多节点主从（Master-Slave）架构进行水平扩展。"
        },
        "sync": {
          "title": "同步",
          "redis": "主节点的配置变更通过 Redis Pub/Sub 推送通知",
          "consistency": "从节点通过内置的配置同步器监听并拉取更新，实现集群间配置的最终一致性"
        }
      }
    },
    "lightweight": {
      "title": "轻量级与资源效率",
      "lowResource": {
        "title": "极低的资源占用",
        "description": "得益于 Go 语言高效的内存管理以及上述性能优化（如零拷贝、连接池复用），GPT-Load 作为一个编译后的二进制文件运行，无额外运行时依赖，实现了极低的资源占用。",
        "cpu": "单核 CPU",
        "memory": "128MB 内存"
      },
      "versatility": {
        "title": "适用性广",
        "description": "在典型的单机部署场景下，仅需较低的 CPU 和内存即可保障服务的流畅运行。",
        "scenarios": [
          "胜任大型企业的高并发场景",
          "适合资源有限的个人开发者环境"
        ]
      }
    }
  },
  "configurationPage": {
    "title": "配置说明",
    "subtitle": "GPT-Load 采用强大而灵活的三层配置系统，满足不同场景下的配置需求",
    "threeLayerArchitecture": {
      "title": "三层配置系统架构",
      "priorityTitle": "配置优先级",
      "groupConfig": {
        "name": "分组配置",
        "priority": "最高优先级"
      },
      "systemSettings": {
        "name": "系统设置",
        "priority": "中等优先级"
      },
      "environmentVars": {
        "name": "环境变量",
        "priority": "基础优先级"
      },
      "managerDescription": "配置系统通过",
      "managerFunction": "管理配置的加载、合并和热更新"
    },
    "features": {
      "title": "配置特性",
      "items": [
        "• <strong>三层架构</strong>：环境、系统、分组",
        "• <strong>优先级覆盖</strong>：上层覆盖下层",
        "• <strong>热更新支持</strong>：运行时动态生效",
        "• <strong>配置验证</strong>：严格的数据验证"
      ]
    },
    "useCases": {
      "title": "使用场景",
      "items": [
        "• <strong>环境配置</strong>：基础服务参数",
        "• <strong>系统配置</strong>：全局业务设置",
        "• <strong>分组配置</strong>：特定分组定制",
        "• <strong>动态调优</strong>：实时性能优化"
      ]
    },
    "managementMethods": {
      "title": "管理方式",
      "items": [
        "• <strong>环境变量</strong>：.env 文件或系统环境",
        "• <strong>Web 管理</strong>：在线配置界面",
        "• <strong>API 接口</strong>：程序化配置管理",
        "• <strong>配置文件</strong>：JSON 格式导入导出"
      ]
    },
    "bestPractices": {
      "title": "最佳实践",
      "recommendations": {
        "title": "配置管理建议",
        "items": [
          "• <strong>统一管理</strong>：建议使用平台的 Web 界面进行集中管理，以确保一致性。",
          "• <strong>定期审计</strong>：定期审查配置，移除不再使用的参数，确保系统整洁。",
          "• <strong>版本控制</strong>：对于重要的配置变更，建议在版本控制系统中记录，便于追踪和回滚。"
        ]
      },
      "warnings": {
        "title": "注意事项",
        "items": [
          "• <strong>敏感信息</strong>：切勿在项目配置中存储密码、API 密钥等敏感信息，应使用环境变量。",
          "• <strong>谨慎热更新</strong>：热更新功能强大，但需谨慎使用，避免在生产环境中引入意外行为。",
          "• <strong>性能影响</strong>：频繁的配置变更可能对系统性能产生轻微影响，建议在低峰期操作。"
        ]
      }
    },
    "furtherReading": {
      "title": "深入了解",
      "environment": {
        "title": "环境配置",
        "description": "查看通过环境变量或 .env 文件进行的基础设施级别配置。"
      },
      "project": {
        "title": "项目配置",
        "description": "探索通过数据库管理的系统级和分组级动态配置。"
      },
      "cloudflareAiGateway": {
        "title": "Cloudflare AI Gateway",
        "description": "配置 Cloudflare AI Gateway 作为上游代理，优化 AI 服务性能。"
      }
    }
  },
  "cloudflareAIGateway": {
    "title": "Cloudflare AI Gateway 上游配置",
    "subtitle": "本指南将帮助您配置 Cloudflare AI Gateway 作为 GPT-Load 的上游代理，通过 Cloudflare 的全球网络优化 AI 服务请求的性能和稳定性。",
    "importantNotice": {
      "title": "重要提示",
      "description": "Cloudflare AI Gateway 仅支持部分 AI 服务提供商。在配置前请确认您需要的 AI 服务渠道是否在 Cloudflare 支持列表中。如果 API 的平台下拉列表里面没有您的渠道，则该渠道不可用。"
    },
    "step1": {
      "title": "注册并登录 Cloudflare",
      "dashboard": {
        "title": "访问 Cloudflare Dashboard",
        "description": "前往 Cloudflare 官网注册账号并登录到控制台"
      }
    },
    "step2": {
      "title": "进入 AI Gateway 管理页面",
      "navigation": {
        "title": "导航到 AI Gateway",
        "selectMenu": {
          "title": "选择菜单",
          "description": "在左侧导航栏中依次选择：<strong>AI → AI Gateway</strong>"
        },
        "accessPage": {
          "title": "访问管理页面",
          "description": "进入 AI Gateway 管理页面，可以看到当前的网关列表"
        }
      },
      "screenshot": {
        "alt": "Cloudflare AI Gateway 菜单导航截图"
      }
    },
    "step3": {
      "title": "创建 AI Gateway",
      "createButton": {
        "title": "点击创建网关",
        "description": "在 AI Gateway 页面中点击 <strong>&ldquo;创建网关&rdquo;</strong> 按钮开始配置新的网关"
      },
      "configuration": {
        "title": "配置网关参数",
        "gatewayName": {
          "title": "设置网关名称",
          "note": "名称可以随意设置，此处以 &ldquo;gpt-load&rdquo; 为例"
        },
        "defaultSettings": {
          "title": "保持默认配置",
          "description": "其他配置项保持默认值即可"
        },
        "important": {
          "title": "重要配置项",
          "items": [
            "• <strong>不要开启缓存</strong> - CF 的缓存在某些渠道有 bug",
            "• <strong>不要开启网关验证</strong> - 保持验证功能关闭"
          ]
        }
      },
      "screenshot": {
        "alt": "Cloudflare AI Gateway 创建表单截图"
      }
    },
    "step4": {
      "title": "获取渠道代理地址",
      "endpoint": {
        "title": "查看 API 端点",
        "clickAPI": {
          "title": "点击 API 按钮",
          "description": "创建完成后，点击右上角的 <strong>&ldquo;API&rdquo;</strong> 按钮"
        },
        "selectChannel": {
          "title": "选择目标渠道",
          "description": "在 API 的平台下拉列表中找到您需要的 AI 服务提供商，复制对应的代理地址"
        },
        "note": "每个 AI 服务提供商都有对应的代理地址，确保选择正确的渠道"
      },
      "screenshot": {
        "alt": "Cloudflare AI Gateway API 端点列表截图"
      }
    },
    "step5": {
      "title": "配置到 GPT-Load",
      "configuration": {
        "title": "添加上游地址",
        "copyAddress": {
          "title": "复制代理地址",
          "description": "将从 Cloudflare AI Gateway 获取的代理地址复制到 GPT-Load 对应分组的上游地址配置中"
        },
        "example": {
          "title": "示例地址：",
          "explanation": "其中 <code className=\"bg-gray-100 px-1 rounded\">b7fbxxxxxfdba</code> 是您的账户 ID，<code className=\"bg-gray-100 px-1 rounded\">gpt-load</code> 是网关名称，<code className=\"bg-gray-100 px-1 rounded\">google-ai-studio</code> 是具体的 AI 服务提供商"
        }
      },
      "screenshot": {
        "title": "GPT-Load 配置示例",
        "alt": "GPT-Load 配置 Cloudflare AI Gateway 上游地址示例截图"
      }
    },
    "geminiNotice": {
      "title": "Gemini 渠道特别说明",
      "reminder": "重要提醒",
      "description": "当使用 Gemini 渠道类型配合 Cloudflare AI Gateway 时：",
      "items": [
        "<strong>推荐：</strong>使用 Gemini 原生格式调用，工作正常",
        "<strong>不推荐：</strong>使用 Gemini 官方的 OpenAI 格式调用，可能出现输出乱码问题"
      ],
      "recommendation": "这是 Cloudflare AI Gateway 的已知问题，建议始终使用 Gemini 原生格式以确保最佳兼容性。"
    },
    "networkNotice": {
      "title": "网络路由问题提醒",
      "regionalBlock": "关于区域封锁的提醒",
      "description1": "如果您的 GPT-Load 服务器位于中国大陆或香港，Cloudflare 可能会将请求路由至香港节点。",
      "description2": "由于许多 AI 服务商（如 OpenAI）不支持该区域，这可能导致",
      "description3": "错误。",
      "solution": "如遇此问题，请调整服务器的网络环境后重试。"
    },
    "verification": {
      "title": "验证配置",
      "testConnection": "测试连接",
      "description": "配置完成后，发送一个测试请求确认代理工作正常。如果遇到问题，请检查 Cloudflare AI Gateway 状态和 GPT-Load 配置是否正确。"
    },
    "relatedResources": {
      "title": "相关资源",
      "officialDocs": "Cloudflare AI Gateway 官方文档",
      "gptLoadConfig": "GPT-Load 配置说明",
      "channelTypes": "渠道类型说明"
    }
  },
  "managementPage": {
    "title": "分组配置管理",
    "subtitle": "分组创建和配置的完整指南，包括基础配置、上游地址、高级设置等功能的详细配置说明",
    "basicConfig": {
      "title": "基础配置",
      "groupName": {
        "label": "分组名称",
        "description": "分组的唯一标识符，用于系统内部识别和管理，建议使用有意义的命名"
      },
      "displayName": {
        "label": "显示名称",
        "description": "分组的友好显示名称，用于前端界面展示，提高可读性"
      },
      "channelType": {
        "label": "渠道类型",
        "description": "上游服务的类型标识，决定了API兼容性和请求格式"
      },
      "testModel": {
        "label": "测试模型",
        "description": "用于连接测试的模型名称，确保配置正确性"
      },
      "proxyKey": {
        "label": "代理密钥",
        "description": "系统生成的代理密钥，用于API访问认证，支持生成和复制操作"
      },
      "priority": {
        "label": "排序权重",
        "description": "分组的优先级权重，数值越高优先级越高，影响负载均衡策略"
      }
    },
    "upstreamConfig": {
      "title": "上游地址配置",
      "multiAddress": {
        "title": "多地址负载均衡",
        "description": "支持配置多个上游地址实现负载分担和高可用性。注意：多个地址应为同一服务的不同接入点，而非不同的服务提供商。",
        "loadBalancing": "基于权重的轮询算法分发请求",
        "sameService": "所有地址必须为同一上游服务的不同节点",
        "weightRoundRobin": "支持加权轮询，实现智能负载分担"
      },
      "configuration": {
        "title": "配置示例",
        "weight1": "权重: 1 (主要地址)",
        "weight2": "权重: 1 (备用地址)"
      },
      "features": {
        "title": "特性优势",
        "highAvailability": "高可用性：单点故障时自动切换",
        "autoFailover": "自动故障转移：异常节点自动剔除",
        "performance": "性能优化：就近节点访问提升响应速度",
        "monitoring": "实时监控：节点状态和响应时间监控"
      }
    },
    "advancedConfig": {
      "title": "高级配置",
      "groupOverride": {
        "title": "分组配置覆盖",
        "description": "分组级别的配置参数，优先级高于全局系统配置。未配置的参数将使用系统默认值。",
        "priority": {
          "title": "配置优先级",
          "group": "分组配置（最高优先级）",
          "system": "系统配置（中等优先级）",
          "default": "默认配置（最低优先级）"
        },
        "reference": {
          "title": "参考文档",
          "description": "详细的可覆盖配置项请参考项目配置页面说明"
        }
      },
      "customHeaders": {
        "title": "自定义请求头",
        "functionality": {
          "title": "功能说明",
          "add": "添加自定义HTTP请求头",
          "remove": "删除现有的请求头字段",
          "modify": "修改已存在的请求头值"
        },
        "examples": {
          "title": "配置示例",
          "auth": "Authorization: Bearer custom-token",
          "userAgent": "User-Agent: GPT-Load/1.0"
        }
      },
      "parameterOverride": {
        "title": "参数覆盖",
        "description": "高级JSON格式的请求参数覆盖功能，用于强制覆盖用户请求中的特定参数。配置后将自动合并到所有请求中。",
        "format": {
          "title": "JSON格式"
        },
        "useCases": {
          "title": "使用场景",
          "defaultParams": "设置默认参数值",
          "limitParams": "限制参数范围",
          "securityParams": "强制安全参数"
        }
      }
    },
    "bestPractices": {
      "title": "配置最佳实践",
      "configuration": {
        "title": "配置管理",
        "testing": "配置变更前先在测试环境验证",
        "backup": "重要配置变更前备份当前设置",
        "validation": "使用测试功能验证配置有效性"
      },
      "security": {
        "title": "安全建议",
        "keyRotation": "定期轮换API密钥确保安全",
        "accessControl": "限制管理界面访问权限",
        "monitoring": "监控异常访问和错误日志"
      }
    }
  },
  "environmentConfiguration": {
    "title": "环境配置",
    "characteristics": {
      "title": "配置特点",
      "loadingMethod": {
        "title": "加载方式",
        "items": [
          "• 通过环境变量或 .env 文件",
          "• 应用启动时一次性读取",
          "• 运行时不可修改",
          "• 提供基础配置默认值"
        ]
      },
      "useCase": {
        "title": "适用场景",
        "items": [
          "• 服务器基础参数配置",
          "• 数据库连接信息",
          "• 安全认证密钥",
          "• 日志和监控设置"
        ]
      }
    },
    "serverConfig": {
      "title": "服务器配置",
      "table": {
        "configItem": "配置项",
        "envVar": "环境变量",
        "defaultValue": "默认值",
        "description": "说明"
      },
      "items": [
        {
          "name": "服务端口",
          "envVar": "PORT",
          "defaultValue": "3001",
          "description": "HTTP 服务器监听端口"
        },
        {
          "name": "服务地址",
          "envVar": "HOST",
          "defaultValue": "0.0.0.0",
          "description": "HTTP 服务器绑定地址"
        },
        {
          "name": "读取超时",
          "envVar": "SERVER_READ_TIMEOUT",
          "defaultValue": "60",
          "description": "HTTP 服务器读取超时（秒）"
        },
        {
          "name": "写入超时",
          "envVar": "SERVER_WRITE_TIMEOUT",
          "defaultValue": "600",
          "description": "HTTP 服务器写入超时（秒）"
        },
        {
          "name": "空闲超时",
          "envVar": "SERVER_IDLE_TIMEOUT",
          "defaultValue": "120",
          "description": "HTTP 连接空闲超时（秒）"
        },
        {
          "name": "优雅关闭超时",
          "envVar": "SERVER_GRACEFUL_SHUTDOWN_TIMEOUT",
          "defaultValue": "10",
          "description": "服务优雅关闭等待时间（秒）"
        },
        {
          "name": "从节点模式",
          "envVar": "IS_SLAVE",
          "defaultValue": "false",
          "description": "集群部署时从节点标识"
        },
        {
          "name": "时区",
          "envVar": "TZ",
          "defaultValue": "Asia/Shanghai",
          "description": "指定时区"
        }
      ]
    },
    "authDatabaseConfig": {
      "title": "认证与数据库配置",
      "table": {
        "configItem": "配置项",
        "envVar": "环境变量",
        "defaultValue": "默认值",
        "description": "说明"
      },
      "items": [
        {
          "name": "管理密钥",
          "envVar": "AUTH_KEY",
          "defaultValue": "sk-123456",
          "description": "管理端的访问认证密钥，请修改为强密码"
        },
        {
          "name": "数据库连接",
          "envVar": "DATABASE_DSN",
          "defaultValue": "./data/gpt-load.db",
          "description": "数据库连接字符串 (DSN) 或文件路径"
        },
        {
          "name": "Redis 连接",
          "envVar": "REDIS_DSN",
          "defaultValue": "-",
          "description": "Redis 连接字符串，为空时使用内存存储"
        }
      ]
    },
    "performanceCorsConfig": {
      "title": "性能与跨域配置",
      "table": {
        "configItem": "配置项",
        "envVar": "环境变量",
        "defaultValue": "默认值",
        "description": "说明"
      },
      "items": [
        {
          "name": "最大并发请求",
          "envVar": "MAX_CONCURRENT_REQUESTS",
          "defaultValue": "100",
          "description": "系统允许的最大并发请求数"
        },
        {
          "name": "启用 CORS",
          "envVar": "ENABLE_CORS",
          "defaultValue": "true",
          "description": "是否启用跨域资源共享"
        },
        {
          "name": "允许的来源",
          "envVar": "ALLOWED_ORIGINS",
          "defaultValue": "*",
          "description": "允许的来源，逗号分隔"
        },
        {
          "name": "允许的方法",
          "envVar": "ALLOWED_METHODS",
          "defaultValue": "GET,POST,PUT,DELETE,OPTIONS",
          "description": "允许的 HTTP 方法"
        },
        {
          "name": "允许的头部",
          "envVar": "ALLOWED_HEADERS",
          "defaultValue": "*",
          "description": "允许的请求头，逗号分隔"
        },
        {
          "name": "允许凭据",
          "envVar": "ALLOW_CREDENTIALS",
          "defaultValue": "false",
          "description": "是否允许发送凭据"
        }
      ]
    },
    "logConfig": {
      "title": "日志配置",
      "table": {
        "configItem": "配置项",
        "envVar": "环境变量",
        "defaultValue": "默认值",
        "description": "说明"
      },
      "items": [
        {
          "name": "日志级别",
          "envVar": "LOG_LEVEL",
          "defaultValue": "info",
          "description": "日志级别：debug, info, warn, error"
        },
        {
          "name": "日志格式",
          "envVar": "LOG_FORMAT",
          "defaultValue": "text",
          "description": "日志格式：text, json"
        },
        {
          "name": "启用文件日志",
          "envVar": "LOG_ENABLE_FILE",
          "defaultValue": "false",
          "description": "是否启用文件日志输出"
        },
        {
          "name": "日志文件路径",
          "envVar": "LOG_FILE_PATH",
          "defaultValue": "./data/logs/app.log",
          "description": "日志文件存储路径"
        }
      ]
    },
    "proxyConfig": {
      "title": "代理配置",
      "priority": {
        "title": "优先级说明",
        "description": "代理配置支持三层优先级：",
        "fallback": "分组配置 > 系统配置 > 环境配置",
        "envNote": "环境代理作为全局兜底配置，仅在系统配置和分组配置都未设置代理时生效。"
      },
      "autoRead": "GPT-Load 会自动从环境变量中读取代理设置，用于向上游 AI 服务商发起请求。",
      "settings": {
        "title": "代理设置",
        "table": {
          "configItem": "配置项",
          "envVar": "环境变量",
          "defaultValue": "默认值",
          "description": "说明"
        },
        "items": [
          {
            "name": "HTTP 代理",
            "envVar": "HTTP_PROXY",
            "defaultValue": "-",
            "description": "用于 HTTP 请求的代理服务器地址"
          },
          {
            "name": "HTTPS 代理",
            "envVar": "HTTPS_PROXY",
            "defaultValue": "-",
            "description": "用于 HTTPS 请求的代理服务器地址"
          },
          {
            "name": "无代理",
            "envVar": "NO_PROXY",
            "defaultValue": "-",
            "description": "不需要通过代理访问的主机或域名，逗号分隔"
          }
        ]
      },
      "formats": {
        "title": "支持的协议格式",
        "items": [
          {
            "protocol": "HTTP",
            "format": "http://user:pass@host:port"
          },
          {
            "protocol": "HTTPS",
            "format": "https://user:pass@host:port"
          },
          {
            "protocol": "SOCKS5",
            "format": "socks5://user:pass@host:port"
          }
        ]
      }
    },
    "summary": {
      "title": "环境配置总结",
      "description": "环境配置是 GPT-Load 配置系统的基石，主要负责提供应用运行所需的基础设施参数。",
      "features": [
        "<strong>基础服务参数</strong>：定义了应用启动和运行所依赖的核心服务，如服务器端口、数据库连接等。",
        "<strong>管理特性</strong>：通过 <code>.env</code> 文件或操作系统环境变量进行配置，在应用启动时加载，确保了配置的稳定性和一致性。",
        "<strong>使用优势</strong>：为系统提供了可靠的默认值，同时将敏感信息（如数据库密码、API密钥）与代码库分离，增强了安全性。"
      ]
    }
  },
  "projectConfigurationPage": {
    "title": "项目配置",
    "systemSettings": {
      "title": "系统设置",
      "characteristics": {
        "title": "配置特点",
        "storage": {
          "title": "存储方式",
          "database": "存储在数据库中",
          "dynamicModification": "支持管理 API 动态修改",
          "hotReload": "支持热重载无需重启",
          "baseline": "为整个应用提供行为基准"
        },
        "management": {
          "title": "管理特性",
          "webInterface": "Web 界面可视化配置",
          "restfulApi": "RESTful API 程序化管理",
          "validation": "配置验证和约束检查",
          "history": "变更历史记录和回滚"
        }
      },
      "table": {
        "headers": {
          "configItem": "配置项",
          "fieldName": "字段名",
          "defaultValue": "默认值",
          "groupOverridable": "分组可覆盖",
          "description": "说明"
        }
      },
      "basicParameters": {
        "title": "基础参数",
        "appUrl": {
          "name": "项目地址",
          "description": "项目基础 URL，用于拼接分组端点"
        },
        "proxyKeys": {
          "name": "全局代理密钥",
          "defaultValue": "初始值为环境配置的 AUTH_KEY",
          "description": "全局生效的代理认证密钥，多个用逗号分隔"
        },
        "logRetention": {
          "name": "日志保留天数",
          "description": "请求日志数据库保留天数，0 为不清理"
        },
        "logWriteInterval": {
          "name": "日志写入间隔",
          "description": "日志写入数据库周期（分钟）"
        },
        "enableRequestBodyLogging": {
          "name": "启用日志详情",
          "description": "是否在请求日志中记录完整的请求体内容，启用会增加内存和存储占用"
        }
      },
      "requestSettings": {
        "title": "请求设置",
        "requestTimeout": {
          "name": "请求超时",
          "description": "转发请求完整生命周期超时（秒）"
        },
        "connectTimeout": {
          "name": "连接超时",
          "description": "与上游服务建立连接超时（秒）"
        },
        "idleConnTimeout": {
          "name": "空闲连接超时",
          "description": "HTTP 客户端空闲连接超时（秒）"
        },
        "responseHeaderTimeout": {
          "name": "响应头超时",
          "description": "等待上游响应头超时（秒）"
        },
        "maxIdleConns": {
          "name": "最大空闲连接数",
          "description": "连接池最大空闲连接总数"
        },
        "maxIdleConnsPerHost": {
          "name": "每主机最大空闲连接数",
          "description": "每个上游主机最大空闲连接数"
        },
        "proxyUrl": {
          "name": "代理服务器地址",
          "description": "用于转发请求的 HTTP/HTTPS 代理，为空则使用环境配置"
        }
      },
      "keyConfiguration": {
        "title": "密钥配置",
        "maxRetries": {
          "name": "最大重试次数",
          "description": "单个请求使用不同密钥的最大重试次数"
        },
        "blacklistThreshold": {
          "name": "黑名单阈值",
          "description": "密钥连续失败多少次后进入黑名单"
        },
        "keyValidationInterval": {
          "name": "密钥验证间隔",
          "description": "后台定时验证密钥周期（分钟）"
        },
        "keyValidationConcurrency": {
          "name": "密钥验证并发数",
          "description": "后台定时验证无效 Key 时的并发数"
        },
        "keyValidationTimeout": {
          "name": "密钥验证超时",
          "description": "后台定时验证单个 Key 时的 API 请求超时时间（秒）"
        }
      },
      "proxyConfigPriority": {
        "title": "代理配置优先级",
        "description": "系统代理配置优先级为中等，会覆盖环境变量配置，但可被分组配置覆盖：",
        "hierarchy": "分组配置 > 系统配置 > 环境配置",
        "fallback": "当系统配置中的 proxy_url 为空时，将自动使用环境变量中的代理设置。"
      }
    },
    "groupConfiguration": {
      "title": "分组配置",
      "characteristics": {
        "title": "配置特点",
        "highestPriority": {
          "title": "优先级最高",
          "override": "可覆盖系统设置的任意参数",
          "customize": "为特定分组定制专用行为",
          "tuning": "支持细粒度的性能调优",
          "isolation": "实现多租户隔离配置",
          "proxyPriority": "代理配置优先级最高，覆盖系统和环境设置"
        },
        "flexibility": {
          "title": "配置灵活性",
          "jsonFormat": "JSON 格式的灵活配置",
          "inheritance": "支持参数覆盖和继承",
          "dynamicCalculation": "动态计算有效配置",
          "validation": "配置验证和约束检查"
        }
      },
      "overridableSettings": {
        "title": "可覆盖的配置项",
        "requestConnection": {
          "title": "请求与连接配置",
          "requestTimeout": "请求超时",
          "connectTimeout": "连接超时",
          "idleConnTimeout": "空闲连接超时",
          "responseHeaderTimeout": "响应头超时",
          "maxIdleConns": "最大空闲连接数",
          "maxIdleConnsPerHost": "每主机最大空闲连接数",
          "proxyUrl": "代理服务器地址"
        },
        "keyManagement": {
          "title": "密钥管理配置",
          "maxRetries": "最大重试次数",
          "blacklistThreshold": "黑名单阈值",
          "keyValidationInterval": "密钥验证间隔",
          "keyValidationConcurrency": "密钥验证并发数",
          "keyValidationTimeout": "密钥验证超时",
          "enableRequestBodyLogging": "启用日志详情"
        }
      }
    },
    "summary": {
      "title": "项目配置总结",
      "description": "项目配置是 GPT-Load 配置系统的核心，提供了强大的动态管理能力，涵盖系统级和分组级的配置。",
      "roleAndLayering": {
        "title": "角色与分层",
        "description": "分为\"系统设置\"和\"分组配置\"，前者为全局基准，后者为特定场景提供覆盖，实现了层次化管理。"
      },
      "managementFeatures": {
        "title": "管理特性",
        "description": "支持通过 Web 界面和 API 进行动态修改，配置变更可热更新，无需重启服务，保证了系统的高可用性。"
      },
      "proxyConfigPriority": {
        "title": "代理配置优先级",
        "description": "分组配置 > 系统配置 > 环境配置，实现了从全局到特定分组的灵活代理设置。"
      },
      "usageAdvantages": {
        "title": "使用优势",
        "description": "提供了极高的灵活性和动态调整能力，允许针对不同业务场景（如多租户）进行细粒度隔离和优化。"
      }
    }
  },
  "deploymentPage": {
    "title": "部署指南",
    "subtitle": "GPT-Load 提供多种部署方案，满足不同场景的需求。从轻量化的单机部署到企业级的集群部署，选择最适合您的方案。",
    "viewDetails": "查看详情",
    "standalone": {
      "title": "单机部署",
      "subtitle": "轻量化部署，适合个人和小团队",
      "quickStart": {
        "title": "快速启动",
        "description": "使用 Docker Compose 一键部署，SQLite + 内存存储"
      },
      "optional": {
        "title": "可选部署",
        "description": "配置 MySQL/PostgreSQL 和 Redis，提升性能"
      }
    },
    "source": {
      "title": "源码部署",
      "subtitle": "开发者友好，完全自定义",
      "fullControl": {
        "title": "完全控制",
        "description": "自定义构建、配置和部署流程"
      },
      "development": {
        "title": "开发调试",
        "description": "适合开发环境和功能定制"
      }
    },
    "cluster": {
      "title": "集群部署",
      "subtitle": "企业级高可用方案",
      "masterSlave": {
        "title": "主从架构",
        "description": "分布式部署，支持水平扩展"
      },
      "highAvailability": {
        "title": "高可用",
        "description": "故障转移和负载均衡"
      }
    },
    "comparison": {
      "title": "方案对比",
      "headers": {
        "solution": "部署方案",
        "scenario": "适用场景",
        "requirements": "技术要求",
        "performance": "性能表现",
        "complexity": "运维难度"
      },
      "rows": {
        "standalone": {
          "solution": "单机部署",
          "scenario": "个人、小团队",
          "requirements": "Docker 基础",
          "performance": "中等",
          "complexity": "简单"
        },
        "source": {
          "solution": "源码部署",
          "scenario": "开发调试",
          "requirements": "Go 开发经验",
          "performance": "高",
          "complexity": "中等"
        },
        "cluster": {
          "solution": "集群部署",
          "scenario": "企业生产",
          "requirements": "K8s/运维经验",
          "performance": "很高",
          "complexity": "复杂"
        },
        "clawCloud": {
          "solution": "Claw Cloud",
          "scenario": "快速体验",
          "requirements": "GitHub 账号",
          "performance": "中等",
          "complexity": "最简单"
        }
      }
    },
    "gettingStarted": {
      "title": "开始部署",
      "description": "如果您是首次使用 GPT-Load，我们推荐从单机部署开始，它提供了最佳的学习曲线和快速体验。",
      "buttons": {
        "standalone": "单机快速部署",
        "clawCloud": "免费云端体验"
      }
    }
  },
  "cluster": {
    "title": "集群部署",
    "subtitle": "GPT-Load 高可用集群部署方案，支持主从架构和水平扩展",
    "overview": {
      "title": "集群架构概览",
      "architecture": {
        "title": "分布式主从架构",
        "description": "采用一主多从的分布式架构，主节点负责管理功能，从节点专注代理服务，实现高可用和负载分散"
      },
      "components": {
        "master": {
          "title": "主节点 (Master)",
          "description": "Web 管理界面、配置管理、统计分析"
        },
        "slave": {
          "title": "从节点 (Slave)",
          "description": "专注 API 代理服务，支持水平扩展"
        },
        "storage": {
          "title": "共享存储",
          "description": "统一的 MySQL 和 Redis 集群"
        }
      }
    },
    "prerequisites": {
      "title": "部署要求",
      "warning": {
        "title": "重要提示",
        "description": "集群部署时 数据库 和 Redis 是必需的，用于分布式协调和状态同步"
      },
      "infrastructure": {
        "title": "基础设施要求",
        "database": {
          "title": "数据库集群",
          "items": [
            "• MySQL 8.2+ 高可用集群",
            "• 支持主从复制或 Galera 集群",
            "• 建议配置读写分离",
            "• 定期备份和故障恢复机制"
          ]
        },
        "cache": {
          "title": "缓存集群",
          "items": [
            "• Redis 集群或哨兵模式",
            "• 用于分布式锁和状态同步",
            "• 配置持久化和故障转移",
            "• 监控内存使用和性能"
          ]
        }
      }
    },
    "deploymentSteps": {
      "title": "部署步骤",
      "step1": {
        "title": "准备共享基础设施",
        "database": {
          "title": "部署 MySQL 集群(或者PostgreSQL)",
          "description": "建议使用云数据库集群服务，或自行部署独立的 MySQL/PostgreSQL 集群。"
        },
        "redis": {
          "title": "部署 Redis 集群",
          "description": "建议使用 Redis Sentinel 或集群模式，确保高可用性和数据一致性。"
        }
      },
      "step2": {
        "title": "节点docker-compose.yml内容参考（主从节点一致）",
        "dockerCompose": "services:\n  gpt-load:\n    image: ghcr.io/tbphp/gpt-load:latest\n    container_name: gpt-load\n    ports:\n      - \"${PORT:-3001}:${PORT:-3001}\"\n    env_file:\n      - .env\n    restart: always\n    volumes:\n      - ./data:/app/data\n    stop_grace_period: ${SERVER_GRACEFUL_SHUTDOWN_TIMEOUT:-10}s\n    healthcheck:\n      test: wget -q --spider -T 10 -O /dev/null http://localhost:${PORT:-3001}/health\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s",
        "slaveConfig": {
          "title": "使用配置区分主从节点",
          "code": "IS_SLAVE=true",
          "description1": "主节点不配置，或者配置为IS_SLAVE=false。从节点配置为IS_SLAVE=true。",
          "description2": "保证整个集群只有一个主节点。"
        }
      },
      "step3": {
        "title": "配置负载均衡",
        "description": "使用 Nginx 或其他负载均衡器分发请求到不同的从节点",
        "nginx": {
          "title": "Nginx 配置示例",
          "config": "# nginx.conf\nupstream gpt_load_cluster {\n    server master-node-ip:3001 weight=3;\n    server slave-node1-ip:3001 weight=5;\n    server slave-node2-ip:3001 weight=5;\n    # 可添加更多从节点\n}\n\nserver {\n    listen 80;\n    server_name your-domain.com;\n\n    location / {\n        proxy_pass http://gpt_load_cluster;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n\n        # 如果使用CF或其他代理服务，需要设置真实IP\n        set_real_ip_from 0.0.0.0/0;\n        real_ip_header X-Forwarded-For;\n    }\n}"
        }
      }
    },
    "configurationManagement": {
      "title": "配置管理",
      "unified": {
        "title": "统一配置要求",
        "items": [
          {
            "key": "AUTH_KEY",
            "description": "必须相同（管理端密钥）"
          },
          {
            "key": "DATABASE_DSN",
            "description": "必须相同"
          },
          {
            "key": "REDIS_DSN",
            "description": "必须相同"
          },
          {
            "key": "IS_SLAVE",
            "description": "从节点为 true"
          }
        ]
      },
      "dynamic": {
        "title": "动态配置同步",
        "items": [
          "• 系统设置存储在 MySQL 中自动同步",
          "• 分组配置实时推送到所有节点",
          "• 密钥状态通过 Redis 实时共享",
          "• 配置变更无需重启服务"
        ]
      }
    },
    "monitoring": {
      "title": "监控与运维",
      "healthCheck": {
        "title": "健康检查",
        "nodeStatus": {
          "title": "节点健康状态",
          "code": "# 检查节点状态\ncurl http://node:3001/health\n\n# 响应示例\n{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2025-07-15T12:56:00Z\",\n  \"uptime\": \"11.822967ms\"\n}"
        },
        "clusterStatus": {
          "title": "集群状态监控",
          "items": [
            "• 监控各节点请求量和响应时间",
            "• 检查数据库和 Redis 连接状态"
          ]
        }
      },
      "scaling": {
        "title": "扩容与缩容",
        "scaleOut": {
          "title": "水平扩容",
          "items": [
            "• 按需增加从节点数量",
            "• 更新负载均衡器配置",
            "• 新节点自动同步配置",
            "• 无缝接入现有服务"
          ]
        },
        "gracefulShutdown": {
          "title": "优雅下线",
          "items": [
            "• 从负载均衡器移除节点",
            "• 等待现有请求处理完成",
            "• 发送停止信号给容器",
            "• 清理相关资源和日志"
          ]
        }
      }
    },
    "bestPractices": {
      "title": "最佳实践",
      "recommended": {
        "title": "✅ 推荐做法",
        "items": [
          "• 使用容器编排工具 (Docker Swarm/K8s)",
          "• 配置数据库和 Redis 的高可用",
          "• 设置完整的监控和告警系统",
          "• 定期备份配置和数据",
          "• 使用配置管理工具统一部署",
          "• 实施蓝绿部署或滚动更新"
        ]
      },
      "avoid": {
        "title": "❌ 避免做法",
        "items": [
          "• 单点故障的数据库或缓存",
          "• 节点间配置不一致",
          "• 忽略网络延迟和分区问题",
          "• 缺乏监控和日志收集",
          "• 手动管理大量节点配置",
          "• 直接修改生产环境配置"
        ]
      }
    }
  },
  "deployment": {
    "source": {
      "title": "源码部署",
      "subtitle": "通过源码构建和部署 GPT-Load，适合开发者进行功能定制和调试。提供完全的控制权和灵活性。",
      "prerequisites": {
        "title": "环境要求",
        "development": {
          "title": "开发环境",
          "description": "需要本地安装 Go 开发环境和相关工具链"
        },
        "required": {
          "title": "必需软件",
          "go": "Go 1.23+ 开发环境",
          "git": "Git 版本控制工具",
          "make": "Make 构建工具",
          "database": "数据库服务（MySQL/PostgreSQL/SQLite）"
        },
        "optional": {
          "title": "可选软件",
          "redis": "Redis 缓存服务",
          "nodejs": "Node.js 和 npm（前端开发）",
          "docker": "Docker（容器化测试）",
          "ide": "IDE 或编辑器（VS Code/GoLand）"
        }
      },
      "installation": {
        "title": "安装步骤",
        "tip": "提示",
        "note": "注意",
        "step1": {
          "title": "克隆源码",
          "description": "从 GitHub 克隆 GPT-Load 源码仓库：",
          "tip": "如果需要特定版本，可以使用 git checkout v1.x.x 切换到对应版本标签"
        },
        "step2": {
          "title": "安装依赖",
          "description": "下载并安装 Go 模块依赖：",
          "code": "go mod tidy",
          "warning": "确保网络连接正常，某些依赖可能需要从海外服务器下载"
        },
        "step3": {
          "title": "数据库配置",
          "config": {
            "title": "创建配置文件",
            "code": "cp .env.example .env",
            "description": "复制示例配置文件并根据你的环境进行修改"
          },
          "database": {
            "title": "数据库连接配置",
            "sqlite": "SQLite（推荐用于开发）",
            "sqliteCode": "DATABASE_DSN=./data/gpt-load.db",
            "mysql": "MySQL",
            "mysqlCode": "DATABASE_DSN=root:123456@tcp(mysql:3306)/gpt-load?charset=utf8mb4&parseTime=True&loc=Local",
            "postgresql": "PostgreSQL",
            "postgresqlCode": "DATABASE_DSN=postgres://postgres:123456@postgres:5432/gpt-load?sslmode=disable"
          }
        },
        "step4": {
          "title": "构建运行",
          "frontend": {
            "title": "构建前端",
            "code": "cd web && npm install && npm run build"
          },
          "backend": {
            "title": "运行后端开发服务",
            "code": "go run main.go"
          },
          "dev": {
            "title": "运行前端开发服务",
            "code": "cd web && npm run dev"
          }
        }
      },
      "development": {
        "title": "开发指南",
        "structure": {
          "title": "项目结构",
          "root": "gpt-load/",
          "internal": "internal/ # 内部业务逻辑",
          "app": "app/ # 应用初始化",
          "channel": "channel/ # 渠道类型管理",
          "config": "config/ # 配置管理",
          "container": "container/ # dig容器服务管理",
          "db": "db/ # DB初始化及迁移脚本",
          "errors": "errors/ # 错误信息",
          "handler": "handler/ # 管理端API接口",
          "httpclient": "httpclient/ # HTTP客户端封装",
          "keypool": "keypool/ # 密钥池管理",
          "middleware": "middleware/ # 中间件",
          "models": "models/ # 数据模型",
          "proxy": "proxy/ # 代理服务",
          "response": "response/ # 响应封装",
          "router": "router/ # 路由",
          "services": "services/ # 逻辑服务层",
          "store": "store/ # 统一内存",
          "syncer": "syncer/ # 集群同步器",
          "types": "types/ # 类型定义",
          "utils": "utils/ # 工具函数",
          "version": "version/ # 版本常量",
          "web": "web/ # 前端资源",
          "gomod": "go.mod # Go 模块定义",
          "envexample": ".env.example # 配置示例",
          "dockercompose": "docker-compose.yml # 配置示例",
          "dockerfile": "Dockerfile # 配置示例",
          "makefile": "Makefile # 构建规则",
          "maingo": "main.go # 入口程序"
        }
      },
      "troubleshooting": {
        "title": "故障排除",
        "error": "错误信息",
        "solution": "解决方案",
        "common": {
          "title": "常见问题",
          "goVersion": {
            "title": "Go 版本过低",
            "error": "go version go1.xx.x: minimum supported version is go1.23",
            "solution": "升级 Go 版本到 1.23 或更高版本"
          },
          "dependency": {
            "title": "依赖下载失败",
            "cause": "可能的原因：网络连接问题或代理设置",
            "codeComment": "# 设置 Go 代理",
            "code": "go env -w GOPROXY=https://goproxy.cn,direct"
          }
        }
      },
      "nextSteps": {
        "title": "下一步",
        "description": "源码部署完成后，您可以：",
        "customize": "深入了解代码结构，进行功能定制",
        "contribute": "参与开源项目，提交 Pull Request",
        "docker": "构建自定义 Docker 镜像",
        "cicd": "集成到 CI/CD 流程中",
        "configurationGuide": "配置说明",
        "systemArchitecture": "系统架构"
      }
    }
  },
  "integrations": {
    "title": "接入指南",
    "description": "GPT-Load 支持接入各种AI应用和开发工具。通过统一的代理接口，您可以轻松地将多个AI服务集成到您喜爱的应用中，实现负载均衡和故障转移。",
    "advantages": {
      "title": "接入优势",
      "items": [
        {
          "title": "统一接口",
          "description": "一套配置支持多个AI服务"
        },
        {
          "title": "负载均衡",
          "description": "自动分配请求，提高可用性"
        },
        {
          "title": "故障转移",
          "description": "服务异常时自动切换备用"
        }
      ]
    },
    "integrations": [
      {
        "name": "Roo Code",
        "description": "智能代码助手，支持多种AI模型",
        "status": "available",
        "icon": "Code2",
        "href": "/docs/integrations/roo-code",
        "category": "开发工具"
      },
      {
        "name": "New API",
        "description": "现代化的API开发平台，支持多种AI模型",
        "status": "available",
        "icon": "Globe",
        "href": "/docs/integrations/new-api",
        "category": "API工具"
      },
      {
        "name": "Cherry Studio",
        "description": "桌面端AI对话应用，支持多种AI模型",
        "status": "available",
        "icon": "Sparkles",
        "href": "/docs/integrations/cherry-studio",
        "category": "桌面应用"
      },
      {
        "name": "Claude Code Router",
        "description": "智能代码路由工具，支持多模型切换",
        "status": "available",
        "icon": "Terminal",
        "href": "/docs/integrations/claude-code-router",
        "category": "开发工具"
      }
    ],
    "categories": [
      {
        "title": "开发工具",
        "description": "集成到各种开发工具和IDE中",
        "items": []
      },
      {
        "title": "API工具",
        "description": "API开发和测试平台的集成",
        "items": []
      },
      {
        "title": "桌面应用",
        "description": "桌面端AI应用的接入配置",
        "items": []
      }
    ],
    "status": {
      "available": "可用",
      "comingSoon": "即将推出"
    },
    "viewGuide": "查看接入指南",
    "comingSoon": "敬请期待",
    "contribution": {
      "title": "贡献接入指南",
      "description": "如果您成功将 GPT-Load 接入到其他应用中，欢迎贡献您的接入指南。这将帮助更多用户受益。",
      "githubLink": "在 GitHub 上贡献"
    }
  },
  "claudeCodeRouter": {
    "title": "Claude Code Router 接入指南",
    "description": "本指南将帮助您将 GPT-Load 代理服务接入到 Claude Code Router 工具中，实现多模型智能路由和代码辅助功能。",
    "prerequisites": {
      "title": "前置条件",
      "items": [
        "确保您已经成功部署并启动了 GPT-Load 服务，默认运行在 http://localhost:3001",
        "已安装 Node.js 和 npm 环境"
      ]
    },
    "installation": {
      "title": "安装工具",
      "globalInstall": {
        "title": "全局安装必要组件"
      },
      "claudeCode": {
        "title": "安装 Claude Code",
        "command": "npm install -g @anthropic-ai/claude-code"
      },
      "claudeCodeRouter": {
        "title": "安装 Claude Code Router",
        "command": "npm install -g @musistudio/claude-code-router"
      },
      "reference": {
        "title": "参考文档：",
        "url": "https://github.com/musistudio/claude-code-router/blob/main/README_zh.md",
        "text": "Claude Code Router 官方文档"
      }
    },
    "configuration": {
      "title": "配置文件设置",
      "createConfig": {
        "title": "创建配置文件"
      },
      "configPath": {
        "title": "配置文件路径",
        "path": "~/.claude-code-router/config.json",
        "note": "如果目录不存在，请先创建目录结构"
      },
      "configExample": {
        "title": "配置内容示例",
        "content": "{\n  \"Providers\": [\n    {\n      \"name\": \"gpt-load-openai\",\n      \"api_base_url\": \"http://localhost:3001/proxy/openai/v1/chat/completions\",\n      \"api_key\": \"sk-123456\",\n      \"models\": [\n        \"gpt-4.1-mini\",\n        \"gpt-4.1-nano\"\n      ]\n    },\n    {\n      \"name\": \"gpt-load-gemini\",\n      \"api_base_url\": \"http://localhost:3001/proxy/gemini/v1beta/models/\",\n      \"api_key\": \"sk-123456\",\n      \"models\": [\n        \"gemini-2.5-pro\",\n        \"gemini-2.5-flash\"\n      ],\n      \"transformer\": {\n        \"use\": [\n          \"gemini\"\n        ]\n      }\n    },\n    {\n      \"name\": \"gpt-load-gemini-openai\",\n      \"api_base_url\": \"http://localhost:3001/proxy/gemini/v1beta/openai/chat/completions\",\n      \"api_key\": \"sk-123456\",\n      \"models\": [\n        \"gemini-2.5-pro\",\n        \"gemini-2.5-flash\"\n      ]\n    },\n    {\n      \"name\": \"gpt-load-anthropic\",\n      \"api_base_url\": \"http://localhost:3001/proxy/anthropic/v1/messages\",\n      \"api_key\": \"sk-123456\",\n      \"models\": [\n        \"claude-sonnet-4-20250514\",\n        \"claude-3-haiku-20240307\"\n      ],\n      \"transformer\": {\n        \"use\": [\n          \"Anthropic\"\n        ]\n      }\n    }\n  ],\n  \"Router\": {\n    \"default\": \"gpt-load-gemini,gemini-2.5-pro\",\n    \"background\": \"gpt-load-gemini,gemini-2.5-flash\",\n    \"think\": \"gpt-load-gemini,gemini-2.5-pro\",\n    \"longContext\": \"gpt-load-gemini,gemini-2.5-pro\",\n    \"longContextThreshold\": 60000,\n    \"webSearch\": \"gpt-load-gemini,gemini-2.5-flash\"\n  }\n}"
      }
    },
    "explanation": {
      "title": "配置说明",
      "providers": {
        "title": "Providers 配置详解",
        "items": [
          {
            "name": "gpt-load-openai",
            "description": "OpenAI 渠道类型",
            "type": "green"
          },
          {
            "name": "gpt-load-gemini",
            "description": "Gemini 原生格式",
            "type": "blue"
          },
          {
            "name": "gpt-load-gemini-openai",
            "description": "Gemini OpenAI 兼容格式",
            "type": "cyan"
          },
          {
            "name": "gpt-load-anthropic",
            "description": "Anthropic Claude 渠道",
            "type": "purple"
          }
        ],
        "important": {
          "title": "重要配置注意事项",
          "items": [
            "将 localhost:3001 替换为您实际的 GPT-Load 访问地址",
            "Providers 中的提供商根据你实际在GPT-Load里面配置的渠道类型进行调整",
            "路径中的 openai、gemini 等是您在 GPT-Load 中配置的分组名称",
            "模型列表需要根据您的渠道实际支持的模型进行调整",
            "Anthropic 配置中的 transformer.use 值为 Anthropic（首字母大写）"
          ]
        }
      },
      "router": {
        "title": "Router 路由配置",
        "items": [
          {
            "key": "default",
            "description": "默认模型"
          },
          {
            "key": "background",
            "description": "后台任务"
          },
          {
            "key": "think",
            "description": "思考模式"
          },
          {
            "key": "longContext",
            "description": "长上下文"
          },
          {
            "key": "webSearch",
            "description": "网络搜索"
          }
        ],
        "note": {
          "title": "示例配置说明：",
          "description": "上述示例主要配置了 Gemini 模型， 您可以根据实际需要配置其他模型组合，如 OpenAI 或 Anthropic 模型。"
        }
      }
    },
    "usage": {
      "title": "启动使用",
      "launch": {
        "title": "启动命令",
        "commandTitle": "启动 Claude Code Router",
        "command": "ccr code",
        "description": "配置完成后，即可使用此命令启动 Claude Code Router 工具"
      }
    },
    "verification": {
      "title": "验证配置",
      "test": {
        "title": "测试连接",
        "description": "启动成功后，尝试执行一些基本的代码相关任务，确认各个模型能够正常响应。如果遇到问题，请检查 GPT-Load 服务状态、配置文件语法以及网络连接。"
      }
    },
    "relatedResources": {
      "title": "相关资源",
      "officialDocs": {
        "url": "https://github.com/musistudio/claude-code-router/blob/main/README_zh.md",
        "text": "Claude Code Router 官方文档"
      },
      "gptLoadConfig": "GPT-Load 配置说明",
      "channelTypes": "渠道类型说明"
    }
  },
  "newApi": {
    "title": "New API 接入指南",
    "description": "本指南将帮助您将 GPT-Load 代理服务接入到 New API 平台中，支持 OpenAI、Gemini、Gemini OpenAI 兼容和 Anthropic 四种渠道类型。",
    "prerequisites": {
      "title": "前置条件",
      "description": "确保您已经成功部署并启动了 GPT-Load 服务，默认运行在 http://localhost:3001"
    },
    "openai": {
      "title": "OpenAI 渠道配置",
      "imageAlt": "New API OpenAI 配置截图",
      "configSteps": {
        "title": "配置步骤",
        "selectType": {
          "title": "选择类型",
          "description": "在 New API 中选择\"OpenAI\"类型"
        },
        "configKey": {
          "title": "配置密钥",
          "example": "sk-123456",
          "note": "使用您在 GPT-Load 中配置的代理密钥"
        },
        "apiAddress": {
          "title": "设置 API 地址",
          "example": "http://localhost:3001/proxy/openai",
          "note": "其中\"openai\"是您在 GPT-Load 中配置的分组名称"
        },
        "addModel": {
          "title": "添加模型并测试",
          "description": "添加好模型列表并进行测试验证"
        }
      }
    },
    "gemini": {
      "title": "Gemini 渠道配置",
      "imageAlt": "New API Gemini 配置截图",
      "configSteps": {
        "title": "配置步骤",
        "selectType": {
          "title": "选择类型",
          "description": "在 New API 中选择\"Google Gemini\"类型"
        },
        "configKey": {
          "title": "配置密钥",
          "example": "sk-123456",
          "note": "使用您在 GPT-Load 中配置的代理密钥"
        },
        "apiAddress": {
          "title": "设置 API 地址",
          "example": "http://localhost:3001/proxy/gemini",
          "note": "其中\"gemini\"是您在 GPT-Load 中配置的分组名称"
        },
        "modelList": {
          "title": "模型列表配置",
          "description": "由于 New API 的 Gemini 类型获取模型列表存在 bug，新建时可能无法获取，建议手动填写模型名称"
        }
      },
      "modelListNotice": {
        "title": "模型列表获取说明",
        "description": "New API 的 Gemini 类型在新建渠道时可能无法自动获取模型列表，建议先手动填写模型名称。创建完成后，在编辑模式下通常可以正常获取模型列表。"
      }
    },
    "geminiThinking": {
      "title": "Gemini 思考配置",
      "imageAlt": "New API Gemini 思考配置截图",
      "config": {
        "title": "思考功能设置",
        "enableAdaptation": {
          "title": "启用思考适配",
          "description": "在 New API 的系统设置 → 模型相关设置中选择\"启用 Gemini 思考后缀适配\""
        },
        "useSuffix": {
          "title": "使用思考后缀",
          "enableSuffix": "-thinking",
          "enableDescription": "启用思考模式",
          "disableSuffix": "-nothinking",
          "disableDescription": "禁用思考模式",
          "note": "注意：gemini-2.5-pro 模型无法关闭思考功能"
        }
      },
      "warning": {
        "title": "重要提醒",
        "description": "在 New API 中配置了思考功能后，请不要在 GPT-Load 的参数覆盖中再次配置思考相关参数，避免重复配置导致冲突。"
      }
    },
    "geminiSearch": {
      "title": "Gemini 搜索功能配置",
      "config": {
        "title": "启用官方搜索工具",
        "configChoice": {
          "title": "配置选择",
          "description": "可以在 New API 或 GPT-Load 中配置搜索模型（只能在一侧配置）"
        },
        "parameterConfig": {
          "title": "参数配置",
          "description": "在参数覆盖中添加以下配置：",
          "example": "{\n  \"tools\": [\n    {\n      \"google_search\": {}\n    }\n  ]\n}",
          "note": "配置完成后即可启用官方的搜索工具功能"
        }
      }
    },
    "geminiOpenAI": {
      "title": "Gemini OpenAI 兼容格式",
      "imageAlt": "New API Gemini OpenAI 兼容格式配置截图",
      "configSteps": {
        "title": "配置步骤",
        "selectType": {
          "title": "选择类型",
          "description": "在 New API 中选择\"自定义渠道\"类型"
        },
        "configKey": {
          "title": "配置密钥",
          "example": "sk-123456",
          "note": "使用您在 GPT-Load 中配置的代理密钥"
        },
        "fullAddress": {
          "title": "设置完整地址",
          "example": "http://localhost:3001/proxy/gemini/v1beta/openai/chat/completions",
          "note": "其中\"gemini\"是您在 GPT-Load 中配置的分组名称"
        },
        "manualModel": {
          "title": "手动添加模型",
          "description": "兼容格式无法自动获取模型列表，需要手动填入模型名称"
        }
      },
      "limitation": {
        "title": "兼容模式限制",
        "description": "使用 OpenAI 兼容模式时，无法配置思考和搜索参数，如需使用这些高级功能，建议使用原生 Gemini 类型。"
      }
    },
    "anthropic": {
      "title": "Anthropic (Claude) 渠道配置",
      "imageAlt": "New API Anthropic 配置截图",
      "configSteps": {
        "title": "配置步骤",
        "selectType": {
          "title": "选择类型",
          "description": "在 New API 中选择\"Anthropic Claude\"类型"
        },
        "configKey": {
          "title": "配置密钥",
          "example": "sk-123456",
          "note": "使用您在 GPT-Load 中配置的代理密钥"
        },
        "apiAddress": {
          "title": "设置 API 地址",
          "example": "http://localhost:3001/proxy/anthropic",
          "note": "其中\"anthropic\"是您在 GPT-Load 中配置的分组名称"
        }
      }
    },
    "importantNotes": {
      "title": "重要说明",
      "configuration": {
        "title": "配置注意事项",
        "items": [
          "请将示例中的 GPT-Load 访问地址替换为您实际的服务地址",
          "路径中的分组名称（如 openai、gemini、anthropic）需要与您在 GPT-Load 中的实际配置保持一致",
          "建议先在小范围内测试配置，确认无误后再正式使用"
        ]
      }
    },
    "relatedResources": {
      "title": "相关资源",
      "newApiDocs": {
        "url": "https://www.newapi.ai/getting-started/",
        "text": "New API 官方文档"
      },
      "gptLoadConfig": "GPT-Load 配置说明",
      "channelTypes": "渠道类型说明"
    }
  },
  "cherryStudio": {
    "title": "Cherry Studio 接入指南",
    "description": "本指南将帮助您将 GPT-Load 代理服务接入到 Cherry Studio AI 客户端中，支持 OpenAI、Gemini、Gemini OpenAI 兼容和 Anthropic 四种渠道类型。",
    "prerequisites": {
      "title": "前置条件",
      "description": "确保您已经成功部署并启动了 GPT-Load 服务，默认运行在 http://localhost:3001"
    },
    "generalSteps": {
      "title": "通用添加步骤",
      "serviceLocation": {
        "title": "服务添加位置",
        "step1": {
          "title": "访问设置页面",
          "description": "在 Cherry Studio 左下角点击\"设置\" → \"模型服务\""
        },
        "step2": {
          "title": "添加新服务",
          "description": "在页面底部点击\"添加\"按钮（请勿使用列表中现有的服务）"
        },
        "step3": {
          "title": "配置完成后获取模型",
          "description": "点击\"管理\"按钮，获取模型列表并选择需要的模型"
        }
      },
      "reminder": {
        "title": "重要提醒",
        "description": "所有渠道类型都遵循相同的添加流程：选择供应商类型 → 配置 API 地址和密钥 → 获取模型列表。 只是供应商类型和 API 地址配置有所不同。"
      }
    },
    "openai": {
      "title": "OpenAI 渠道配置",
      "create": {
        "title": "步骤一：创建服务",
        "stepsTitle": "创建步骤",
        "step1": {
          "title": "输入服务名称",
          "description": "为您的服务设置一个易于识别的名称"
        },
        "step2": {
          "title": "选择供应商类型",
          "description": "在供应商类型下拉列表中选择 OpenAI"
        },
        "imageAlt": "Cherry Studio OpenAI 服务创建截图"
      },
      "config": {
        "title": "步骤二：配置服务",
        "parametersTitle": "配置参数",
        "apiKey": {
          "title": "配置 API 密钥",
          "description": "使用您在 GPT-Load 中配置的代理密钥"
        },
        "apiUrl": {
          "title": "设置 API 地址",
          "description": "其中\"openai\"是您在 GPT-Load 中配置的分组名称"
        },
        "models": {
          "title": "获取模型列表",
          "description": "配置完成后点击\"管理\"按钮，获取并选择所需模型"
        },
        "imageAlt": "Cherry Studio OpenAI 服务配置截图"
      }
    },
    "gemini": {
      "title": "Gemini 渠道配置",
      "create": {
        "title": "步骤一：创建服务",
        "stepsTitle": "创建步骤",
        "step1": {
          "title": "输入服务名称",
          "description": "为您的 Gemini 服务设置一个易于识别的名称"
        },
        "step2": {
          "title": "选择供应商类型",
          "description": "在供应商类型下拉列表中选择 Gemini"
        },
        "imageAlt": "Cherry Studio Gemini 服务创建截图"
      },
      "config": {
        "title": "步骤二：配置服务",
        "parametersTitle": "配置参数",
        "apiKey": {
          "title": "配置 API 密钥",
          "description": "使用您在 GPT-Load 中配置的代理密钥"
        },
        "apiUrl": {
          "title": "设置 API 地址",
          "description": "其中\"gemini\"是您在 GPT-Load 中配置的分组名称"
        },
        "models": {
          "title": "获取模型列表",
          "description": "配置完成后点击\"管理\"按钮，获取并选择所需模型"
        },
        "imageAlt": "Cherry Studio Gemini 服务配置截图"
      }
    },
    "geminiOpenai": {
      "title": "Gemini OpenAI 兼容格式",
      "create": {
        "title": "步骤一：创建服务",
        "subtitle": "使用 Gemini 渠道的 OpenAI 兼容接口格式",
        "stepsTitle": "创建步骤",
        "step1": {
          "title": "输入服务名称",
          "description": "为您的 Gemini OpenAI 兼容服务设置名称"
        },
        "step2": {
          "title": "选择供应商类型",
          "description": "使用 OpenAI 类型以支持兼容接口"
        },
        "imageAlt": "Cherry Studio Gemini OpenAI 兼容服务创建截图"
      },
      "config": {
        "title": "步骤二：配置服务",
        "parametersTitle": "配置参数",
        "apiKey": {
          "title": "配置 API 密钥",
          "description": "使用您在 GPT-Load 中配置的代理密钥"
        },
        "apiUrl": {
          "title": "设置 API 地址",
          "description": "注意：地址必须以\"/\"结尾，避免 Cherry Studio 自动添加 v1 路径"
        },
        "models": {
          "title": "获取模型列表",
          "description": "配置完成后点击\"管理\"按钮，获取并选择所需模型"
        },
        "imageAlt": "Cherry Studio Gemini OpenAI 兼容服务配置截图"
      },
      "warning": {
        "title": "关键配置注意",
        "description": "API 地址必须以\"/\"结尾！这是 Cherry Studio 的规则要求， 确保不会自动添加 v1 路径，从而保证兼容性接口正常工作。"
      }
    },
    "anthropic": {
      "title": "Anthropic (Claude) 渠道配置",
      "create": {
        "title": "步骤一：创建服务",
        "stepsTitle": "创建步骤",
        "step1": {
          "title": "输入服务名称",
          "description": "为您的 Anthropic 服务设置一个易于识别的名称"
        },
        "step2": {
          "title": "选择供应商类型",
          "description": "在供应商类型下拉列表中选择 Anthropic"
        },
        "imageAlt": "Cherry Studio Anthropic 服务创建截图"
      },
      "config": {
        "title": "步骤二：配置服务",
        "parametersTitle": "配置参数",
        "apiKey": {
          "title": "配置 API 密钥",
          "description": "使用您在 GPT-Load 中配置的代理密钥"
        },
        "apiUrl": {
          "title": "设置 API 地址",
          "description": "其中\"anthropic\"是您在 GPT-Load 中配置的分组名称"
        },
        "models": {
          "title": "获取模型列表",
          "description": "配置完成后点击\"管理\"按钮，获取并选择所需模型"
        },
        "imageAlt": "Cherry Studio Anthropic 服务配置截图"
      }
    },
    "importantNotes": {
      "title": "重要说明",
      "configurationNotes": {
        "title": "配置注意事项",
        "items": [
          "请将示例中的 GPT-Load 访问地址替换为您实际的服务地址",
          "路径中的分组名称（如 openai、gemini、anthropic）需要与您在 GPT-Load 中的实际配置保持一致",
          "使用您在 GPT-Load 中配置的实际代理密钥，不要使用示例中的 sk-123456",
          "配置完成后，记得在对话界面选择刚才添加的模型进行测试"
        ]
      }
    },
    "relatedResources": {
      "title": "相关资源",
      "cherryStudioDocs": "Cherry Studio 官方文档",
      "gptLoadConfig": "GPT-Load 配置说明",
      "channelTypes": "渠道类型说明"
    }
  },
  "introduction": {
    "title": "GPT-Load 项目简介",
    "subtitle": "一个高性能、企业级的 AI 接口透明代理服务，专门为需要集成多种 AI 服务的企业和开发者设计。采用 Go 语言开发，具备智能密钥管理、负载均衡和完善的监控功能，专为高并发生产环境而设计。",
    "coreConcept": {
      "title": "核心概念",
      "transparentProxy": {
        "title": "透明代理",
        "description": "GPT-Load 作为透明代理服务，完全保留各 AI 服务商的原生 API 格式，不做任何格式转换或统一。用户如何请求 GPT-Load，GPT-Load 就如何请求上游服务，实现完全透明的代理功能。"
      }
    },
    "supportedServices": {
      "title": "支持的 AI 服务",
      "openai": {
        "features": [
          "• 官方 OpenAI API",
          "• Azure OpenAI",
          "• 所有兼容 OpenAI 格式的第三方服务"
        ]
      },
      "gemini": {
        "features": [
          "• Gemini Pro",
          "• Gemini Pro Vision",
          "• 支持多模态功能"
        ]
      },
      "claude": {
        "features": [
          "• Claude 系列模型",
          "• 高质量对话生成",
          "• 原生 API 格式支持"
        ]
      }
    },
    "coreFeatures": {
      "title": "核心特性",
      "highPerformance": {
        "title": "高性能架构",
        "description": "零拷贝流式传输，基于 Go 协程的并发模型，支持高并发连接"
      },
      "keyManagement": {
        "title": "智能密钥管理",
        "description": "分组管理、动态轮换、自动重试，确保服务高可用性"
      },
      "loadBalancing": {
        "title": "负载均衡",
        "description": "多上游支持、权重配置、健康检查，智能路由到可用节点"
      },
      "clusterSupport": {
        "title": "集群支持",
        "description": "Master/Slave 架构，无状态设计，支持水平扩展"
      },
      "hotReload": {
        "title": "热重载配置",
        "description": "三层配置系统，环境变量、系统设置、分组配置，支持热更新"
      },
      "adminPanel": {
        "title": "管理后台",
        "description": "Vue 3 现代化界面，实时监控、日志查看、配置管理"
      }
    },
    "techStack": {
      "title": "技术栈",
      "backend": {
        "title": "后端技术",
        "items": [
          {"name": "Go 1.23+", "desc": "主要编程语言"},
          {"name": "Gin", "desc": "HTTP Web 框架"},
          {"name": "GORM", "desc": "ORM 数据库操作框架"},
          {"name": "MySQL 8.2+", "desc": "主数据库存储"},
          {"name": "Redis", "desc": "分布式缓存和状态管理"},
          {"name": "Uber Dig", "desc": "依赖注入容器"}
        ]
      },
      "frontend": {
        "title": "前端 & 运维",
        "items": [
          {"name": "Vue 3", "desc": "前端框架"},
          {"name": "TypeScript", "desc": "类型安全"},
          {"name": "Naive UI", "desc": "UI 组件库"},
          {"name": "Docker", "desc": "容器化部署"},
          {"name": "Docker Compose", "desc": "容器编排"},
          {"name": "GitHub Actions", "desc": "CI/CD 流水线"}
        ]
      }
    },
    "architectureAdvantages": {
      "title": "架构优势",
      "microservices": {
        "title": "微服务架构",
        "items": [
          "• 模块化设计",
          "• 依赖注入",
          "• 接口驱动"
        ]
      },
      "distributed": {
        "title": "分布式设计",
        "items": [
          "• Master/Slave 模式",
          "• 分布式锁",
          "• 缓存同步"
        ]
      },
      "highAvailability": {
        "title": "高可用性",
        "items": [
          "• 优雅降级",
          "• 故障恢复",
          "• 资源保护"
        ]
      }
    },
    "useCases": {
      "title": "应用场景",
      "enterprise": {
        "title": "企业级 AI 服务",
        "items": [
          "• 大规模 API 调用",
          "• 成本控制优化",
          "• 服务稳定性保障"
        ]
      },
      "developer": {
        "title": "开发者工具",
        "items": [
          "• API 统一接入",
          "• 调试和监控",
          "• 快速部署"
        ]
      },
      "multiTenant": {
        "title": "多租户服务",
        "items": [
          "• 租户隔离",
          "• 配置定制",
          "• 使用统计"
        ]
      }
    },
    "deepDive": {
      "title": "深入了解 GPT-Load",
      "subtitle": "探索 GPT-Load 的核心技术架构和高性能设计理念，了解如何实现极致的代理性能",
      "performance": {
        "title": "性能详解",
        "subtitle": "了解极致性能设计",
        "features": [
          "零 I/O 操作代理机制",
          "零拷贝流式传输技术",
          "无锁并发处理架构",
          "极低资源占用优化"
        ]
      },
      "architecture": {
        "title": "架构设计",
        "subtitle": "深入系统设计理念",
        "features": [
          "智能密钥管理机制",
          "路径处理策略设计",
          "分布式集群架构",
          "高可用性保障机制"
        ]
      }
    },
    "gettingStarted": {
      "title": "开始使用 GPT-Load",
      "description": "通过 Docker Compose 快速部署，几分钟内即可启动完整的 AI 接口代理服务",
      "button": "查看部署指南"
    }
  },
  "rooCode": {
    "title": "Roo Code 接入指南",
    "description": "本指南将帮助您将 GPT-Load 代理服务接入到 Roo Code 智能代码助手中，支持 OpenAI、Gemini 和 Anthropic 三种渠道类型。",
    "prerequisites": {
      "title": "前置条件",
      "description": "确保您已经成功部署并启动了 GPT-Load 服务，默认运行在 http://localhost:3001"
    },
    "openai": {
      "title": "OpenAI 渠道配置",
      "imageAlt": "OpenAI Compatible 供应商配置截图",
      "steps": {
        "title": "配置步骤",
        "selectProvider": {
          "title": "选择供应商",
          "description": "在 Roo Code 中选择 \"OpenAI Compatible\" 供应商"
        },
        "setProxy": {
          "title": "设置代理地址",
          "url": "http://localhost:3001/proxy/openai/v1",
          "note": "其中 \"openai\" 是您在 GPT-Load 中配置的分组名称"
        },
        "configKey": {
          "title": "配置 API Key",
          "description": "输入 GPT-Load 中配置的代理密钥"
        }
      }
    },
    "gemini": {
      "title": "Gemini 渠道配置",
      "method1": {
        "title": "方式一：Google Gemini 供应商",
        "subtitle": "使用原生 Gemini 接口格式（推荐）",
        "imageAlt": "Google Gemini 供应商配置截图",
        "steps": {
          "title": "配置步骤",
          "selectProvider": {
            "title": "选择供应商",
            "description": "在 Roo Code 中选择 \"Google Gemini\" 供应商"
          },
          "enableCustomUrl": {
            "title": "启用自定义基础 URL",
            "description": "勾选\"使用自定义基础 URL\"选项"
          },
          "setProxy": {
            "title": "设置代理地址",
            "url": "http://localhost:3001/proxy/gemini",
            "note": "其中 \"gemini\" 是您在 GPT-Load 中配置的分组名称"
          },
          "configKey": {
            "title": "配置 API Key",
            "description": "输入您的 Gemini API Key"
          }
        }
      },
      "method2": {
        "title": "方式二：OpenAI Compatible 格式",
        "subtitle": "使用 OpenAI 兼容接口格式",
        "imageAlt": "Gemini OpenAI Compatible 供应商配置截图",
        "steps": {
          "title": "配置步骤",
          "selectProvider": {
            "title": "选择供应商",
            "description": "在 Roo Code 中选择 \"OpenAI Compatible\" 供应商"
          },
          "setProxy": {
            "title": "设置代理地址",
            "url": "http://localhost:3001/proxy/gemini/v1beta/openai",
            "note": "其中 \"gemini\" 是您在 GPT-Load 中配置的分组名称"
          },
          "configKey": {
            "title": "配置 API Key",
            "description": "输入您的 Gemini API Key"
          }
        }
      },
      "recommendation": {
        "title": "配置建议",
        "description": "推荐使用 方式一：Google Gemini 供应商，因为它使用原生 Gemini 接口格式，提供了更好的兼容性和完整的功能支持。"
      }
    },
    "anthropic": {
      "title": "Anthropic (Claude) 渠道配置",
      "imageAlt": "Anthropic 供应商配置截图",
      "steps": {
        "title": "配置步骤",
        "selectProvider": {
          "title": "选择供应商",
          "description": "在 Roo Code 中选择 \"Anthropic\" 供应商"
        },
        "setProxy": {
          "title": "设置代理地址",
          "url": "http://localhost:3001/proxy/anthropic",
          "note": "其中 \"anthropic\" 是您在 GPT-Load 中配置的分组名称"
        },
        "configKey": {
          "title": "配置 API Key",
          "description": "输入您的 Anthropic API Key"
        }
      }
    },
    "verification": {
      "title": "验证配置",
      "test": {
        "title": "测试连接",
        "description": "配置完成后，在 Roo Code 中发送一个测试消息，确认能够正常响应。如果遇到问题，请检查 GPT-Load 服务是否正常运行，以及分组名称是否正确。"
      }
    },
    "relatedResources": {
      "title": "相关资源",
      "rooCodeDocs": "Roo Code 官方文档",
      "gptLoadConfig": "GPT-Load 配置说明",
      "channelTypes": "渠道类型说明"
    }
  },
  "sponsor": {
    "title": "支持赞助",
    "subtitle": "如果 GPT-Load 对您有帮助，欢迎请作者喝杯咖啡 ☕️",
    "paymentMethods": {
      "wechat": {
        "title": "微信",
        "description": "扫描二维码进行赞助",
        "qrCodeAlt": "微信支付二维码",
        "instruction": "微信扫一扫"
      },
      "alipay": {
        "title": "支付宝",
        "description": "扫描二维码进行赞助",
        "qrCodeAlt": "支付宝付款二维码",
        "instruction": "支付宝扫一扫"
      }
    },
    "onlinePlatform": {
      "title": "在线赞助平台",
      "afdian": {
        "title": "爱发电赞助",
        "description": "通过爱发电平台，您可以选择一次性赞助或定期支持项目发展"
      }
    },
    "thankYou": {
      "title": "感谢您的支持",
      "message": "您的每一份支持都是我们持续改进 GPT-Load 的动力。无论金额大小，我们都深表感谢！",
      "tags": [
        "💝 每份心意都珍贵",
        "🚀 让项目更上一层楼",
        "❤️ 开源精神万岁"
      ]
    },
    "alternativeSupport": {
      "title": "其他支持方式",
      "github": {
        "title": "⭐ GitHub Star"
      },
      "issues": {
        "title": "🐛 反馈问题"
      },
      "contribute": {
        "title": "🔧 贡献代码"
      }
    }
  }
}